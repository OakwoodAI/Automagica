[{"name": "Cryptography", "icon": "las la-shield-alt", "activities": [{"function_call": "generate_random_key()", "name": "Random key", "description": "Generate random Fernet key. Fernet guarantees that a message encrypted using it cannot be manipulated or read without the key. Fernet is an implementation of symmetric (also known as \u201csecret key\u201d) authenticated cryptography", "example": ">>> generate_random_key()\nb'AYv6ZPVgnrUtHDbGZqAopRyAo9r0_UKrA2Rm3K_NjIo='\n", "snippet": "generate_random_key()\n", "keywords": ["random", "key", "fernet", "hash", "security", "cryptography", "password", "secure"], "icon": "las la-key"}, {"function_call": "encrypt_text_with_key(text, key)", "name": "Encrypt text", "description": "Encrypt text with (Fernet) key,", "example": ">>> key = generate_random_key()\n>>> encrypt_text_with_key('Sample text', key)\nb'gAAAAABd8lpG8fNqcj5eXrPPHlx4KeCm-1TgX3jkyhStMfIlgGImIa-qaINZAj8XcxPcG8iu84iT56b_qAW9c5qpe7btUFhtxQ=='\n", "snippet": "key = generate_random_key()\nencrypt_text_with_key('Sample text', key)\n", "keywords": ["random", "encryption", "secure", "security", "hash", "password", "fernet", "text"], "icon": "las la-lock"}, {"function_call": "decrypt_text_with_key(encrypted_text, key)", "name": "Decrypt text", "description": "Dexrypt bytes-like object to string with (Fernet) key", "example": ">>> key = generate_random_key()\n>>> encrypted_text = encrypt_text_with_key('Sample text', key)\n>>> decrypt_text_with_key(encrypted_text, key)\n'Sample text'\n", "snippet": "key = generate_random_key()\nencrypted_text = encrypt_text_with_key('Sample text', key)\ndecrypt_text_with_key(encrypted_text, key)\n", "keywords": ["decrypt", "random", "unlock", "un-lock hash", "security", "cryptography", "password", "secure", "hash", "text"], "icon": "las la-lock-open"}, {"function_call": "encrypt_file_with_key(input_path, key, output_path=None)", "name": "Encrypt file", "description": "Encrypt file with (Fernet) key. Note that file will be unusable unless unlocked with the same key.", "example": ">>> key = generate_random_key()\n>>> # Create a textfile to illustrate file encryption\n>>> textfile_path = make_textfile()\n>>> # Encrypt the textfile\n>>> encrypt_file_with_key(textfile_path, key=key)\n'C:\\\\Users\\\\<username>\\\\generated_textfile_encrypted.txt'\n", "snippet": "key = generate_random_key()\n# Create a textfile to illustrate file encryption\ntextfile_path = make_textfile()\n# Encrypt the textfile\nencrypt_file_with_key(textfile_path, key=key)\n", "keywords": ["encrypt", "random", "password", "secure", "secure file", "lock"], "icon": "las la-lock"}, {"function_call": "decrypt_file_with_key(input_path, key, output_path=None)", "name": "Decrypt file", "description": "Decrypts file with (Fernet) key", "example": ">>> key = generate_random_key()\n>>> # Create a textfile to encrypt file\n>>> textfile_path = make_textfile()\n>>> # Encrypt the textfile\n>>> encrypted_textfile = encrypt_file_with_key(textfile_path, key=key)\n>>> # Decrypt the newly encrypted file\n>>> decrypt_file_with_key(encrypted_textfile, key=key)\n'C:\\\\Users\\\\<username>\\\\generated_textfile_encrypted_decrypted.txt'\n", "snippet": "key = generate_random_key()\n# Create a textfile to encrypt file\ntextfile_path = make_textfile()\n# Encrypt the textfile\nencrypted_textfile = encrypt_file_with_key(textfile_path, key=key)\n# Decrypt the newly encrypted file\ndecrypt_file_with_key(encrypted_textfile, key=key)\n", "keywords": ["decrypt", "random", "password", "secure", "secure file", "unlock"], "icon": "las la-lock-open"}, {"function_call": "generate_key_from_password(password, salt=None)", "name": "Key from password", "description": "Generate key based on password and salt. If both password and salt are known the key can be regenerated.", "example": ">>> # Generate a key from password\n>>> key = generate_key_from_password(password='Sample password')\nb'7jGGF5w_xyI0CIZGCmLlnNyUvFpNvIUY08JCHopgAmm8='\n", "snippet": "# Generate a key from password\nkey = generate_key_from_password(password='Sample password')\n", "keywords": ["random", "key", "fernet", "hash", "security", "cryptography", "password", "secure", "salt"], "icon": "las la-lock"}, {"function_call": "generate_hash_from_file(input_path, method='md5', buffer_size=65536)", "name": "Hash from file", "description": "Generate hash from file", "example": ">>> # Generate a text file to illustrate hash\n>>> textfile_path = make_textfile()\n>>> # Get hash from textfile\n>>> generate_hash_from_file(textfile_path)\n'1ba249ca5931f3c85fe44d354c2f274d'\n", "snippet": "# Generate a text file to illustrate hash\ntextfile_path = make_textfile()\n# Get hash from textfile\ngenerate_hash_from_file(textfile_path)\n", "keywords": ["hash", "mdf5", "sha256", "blake2b", "identifier", "unique", "hashing", "fingerprint", "comparison"], "icon": "las la-fingerprint"}, {"function_call": "generate_hash_from_text(text, method='md5')", "name": "Hash from text", "description": "Generate hash from text", "example": ">>> # Generate a hast from text\n>>> generate_hash_from_text('Sample text')\n'1ba249ca5931f3c85fe44d354c2f274d'\n", "snippet": "# Generate a hast from text\ngenerate_hash_from_text('Sample text')\n", "keywords": ["Hash", "mdf5", "sha256", "blake2b", "identifier", "unique", "hashing", "fingerprint", "text", "comparison"], "icon": "las la-fingerprint"}]}, {"name": "Random", "icon": "las la-dice-d6", "activities": [{"function_call": "generate_random_number(lower_limit=0, upper_limit=100, fractional=False)", "name": "Random number", "description": "Random numbers can be integers (not a fractional number) or a float (fractional number).", "example": ">>> # Generate a random number\n>>> generate_random_number()\n7\n", "snippet": "# Generate a random number\ngenerate_random_number()\n", "icon": "las la-dice"}, {"function_call": "generate_random_boolean()", "name": "Random boolean", "description": "Generates a random boolean (True or False)", "example": ">>> # Generate a random boolean\n>>> generate_random_boolean()\nTrue\n", "snippet": "# Generate a random boolean\ngenerate_random_boolean()\n", "icon": "las la-coins"}, {"function_call": "generate_random_name(locale=None)", "name": "Random name", "description": "Generates a random name. Adding a locale adds a more common name in the specified locale. Provides first name and last name.", "example": ">>> # Generate a random name\n>>> generate_random_name()\n'Michelle Murphy'\n", "snippet": "# Generate a random name\ngenerate_random_name()\n", "keywords": ["random", "sentence", "lorem ipsum", "text generater", "filler", "place holder", "noise", "random text"], "icon": "las la-comment"}, {"function_call": "generate_random_address(locale=None)", "name": "Random address", "description": "Generates a random address. Specifying locale changes random locations and streetnames based on locale.", "example": ">>> # Generate a random address\n>>> generate_random_address()\n'5639 Cynthia Bridge Suite 610\n'Port Nancy, GA 95894'\n", "snippet": "# Generate a random address\ngenerate_random_address()\n", "keywords": ["random", "address", "random address", "fake person ", "fake address", "fake person generator"], "icon": "las la-map"}, {"function_call": "generate_random_beep(max_duration=2000, max_frequency=5000)", "name": "Random beep", "description": "Generates a random beep, only works on Windows", "example": ">>> # Generate a random beep\n>>> generate_random_beep()\n", "snippet": "# Generate a random beep\ngenerate_random_beep()\n", "keywords": ["beep", "sound", "random", "noise", "alert", "notification"], "icon": "las la-volume-up"}, {"function_call": "generate_random_date(format='%m/%d/%Y %I%M', days_in_past=1000)", "name": "Random date", "description": "Generates a random date.", "example": ">>> # Generate a random date\n>>> generate_random_date()\n01/01/2020 13:37'\n", "snippet": "# Generate a random date\ngenerate_random_date()\n", "keywords": ["random", "date", "datetime", "random date", "fake date ", "calendar"], "icon": "las la-calendar"}, {"function_call": "generate_unique_identifier()", "name": "Generate unique identifier", "description": "Generates a random UUID4 (universally unique identifier). While the probability that a UUID will be duplicated is not zero, it is close enough to zero to be negligible.", "example": ">>> # Generate unique identifier\n>>> generate_unique_identifier()\n'd72fd7ea-d682-4f78-8ca1-0ed34142a992'\n", "snippet": "# Generate unique identifier\ngenerate_unique_identifier()\n", "keywords": ["unique", "identifier", "primary key", "random"], "icon": "las la-random"}]}, {"name": "User Input", "icon": "lab la-wpforms", "activities": [{"function_call": "ask_user_input(title=\"Title\", label=\"Input\", password=False)", "name": "Ask user for input", "description": "Prompt the user for an input with a pop-up window.", "example": ">>> # Make a window pop-up ask for user input\n>>> ask_user_input()\n>>> # Type in text and press 'submit', e.g. 'Sample text'\n'Sample text'\n", "snippet": "# Make a window pop-up ask for user input\nask_user_input()\n# Type in text and press 'submit', e.g. 'Sample text'\n", "keywords": ["user input", "pop-up", "interaction", "popup", "window", "feedback", "screen", "ad-hoc", "attended"], "icon": "las la-window-maximize"}, {"function_call": "ask_user_password(label=\"Password\")", "name": "Ask user for password", "description": "Prompt the user for a password. The password will be masked on screen while entering.", "example": ">>> # Make a window pop-up ask for user password\n>>> ask_user_password()\n>>> # Type in password and press 'submit', e.g. 'Sample password'\n'Sample password'\n", "snippet": "# Make a window pop-up ask for user password\nask_user_password()\n# Type in password and press 'submit', e.g. 'Sample password'\n", "keywords": ["user input", "pop-up", "interaction", "interactive", "credential", "popup", "window", "feedback", "password", "screen", "login", "attended"], "icon": "lar la-window-maximize"}, {"function_call": "ask_credentials(title=\"Credentials required\", dialogue_text_username=\"Username\", dialogue_text_password=\"Password\")", "name": "Ask user for credentials", "description": "Prompt a popup which asks user for username and password and returns in plain text. Password will be masked.", "example": ">>> # Make a window pop-up ask user credentials\n>>> ask_credentials()\n>>> # Type in Username and Password 'submit', e.g. 'Sample username' and 'Sample password'\n('Sample username', 'Sample password')\n", "snippet": "# Make a window pop-up ask user credentials\nask_credentials()\n# Type in Username and Password 'submit', e.g. 'Sample username' and 'Sample password'\n", "keywords": ["message box", "warning", "info", "popup", "window", "feedback", "screen", "attended"], "icon": "las la-window-maximize"}, {"function_call": "display_osd_message(message='Example message', seconds=5)", "name": "Display overlay message", "description": "Display custom OSD (on-screen display) message. Can be used to display a message for a limited amount of time. Can be used for illustration, debugging or as OSD.", "example": ">>> display_osd_message()\n", "snippet": "display_osd_message()\n", "keywords": ["message box", "osd", "overlay", "info warning", "info", "popup", "window", "feedback", "screen", "login", "attended"], "icon": "las la-tv"}]}, {"name": "Browser", "icon": "lab la-chrome", "activities": [{"function_call": "__init__(self, load_images=True, headless=False)", "name": "Opens Chrome Browser", "description": "Open the Chrome Browser with the Selenium webdriver. Canb be used to automate manipulations in the browser.Different elements can be found as:", "example": ">>> # Open the browser\n>>> browser = Chrome()\n>>> # Go to a website\n>>> browser.get('https://automagica.com')\n>>> # Close browser\n>>> browser.quit()\n", "snippet": "# Open the browser\nbrowser = Chrome()\n# Go to a website\nbrowser.get('https://automagica.com')\n# Close browser\nbrowser.quit()\n", "keywords": ["chrome", "browsing", "browser", "internet", "surfing", "web", "webscraping", "www", "selenium", "crawling", "webtesting", "mozilla", "firefox", "internet explorer"], "icon": "lab la-chrome"}, {"function_call": "save_all_images(self, output_path=None)", "name": "Save all images", "description": "Save all images on current page in the Browser", "example": ">>> # Open the browser\n>>> browser = Chrome()\n>>> # Go to a website\n>>> browser.get('https://www.nytimes.com/')\n>>> # Save all images\n>>> browser.save_all_images()\n>>> browser.quit()\n['C:\\\\Users\\\\<username>\\\\image1.png', 'C:\\\\Users\\\\<username>\\\\image2.jpg', 'C:\\\\Users\\\\<username>\\\\image4.gif']\n", "snippet": "# Open the browser\nbrowser = Chrome()\n# Go to a website\nbrowser.get('https://www.nytimes.com/')\n# Save all images\nbrowser.save_all_images()\nbrowser.quit()\n", "keywords": ["image scraping", "chrome", "internet", "browsing", "browser", "surfing", "web", "webscraping", "www", "selenium", "crawling", "webtesting", "mozilla", "firefox", "internet explorer"], "icon": "las la-images"}, {"function_call": "find_elements_by_text(self, text)", "name": "Find elements by text", "description": "Find all elements by their text. Text does not need to match exactly, part of text is enough.", "example": ">>> # Open the browser\n>>> browser = Chrome()\n>>> # Go to a website\n>>> browser.get('https://nytimes.com')\n>>> # Find elements by text\n>>> browser.find_elements_by_text('world')\n[webelement1, webelement2 , .. ]\n", "snippet": "# Open the browser\nbrowser = Chrome()\n# Go to a website\nbrowser.get('https://nytimes.com')\n# Find elements by text\nbrowser.find_elements_by_text('world')\n", "keywords": ["element", "element by text", "chrome", "internet", "browsing", "browser", "surfing", "web", "webscraping", "www", "selenium", "crawling", "webtesting", "mozilla", "firefox", "internet explorer"], "icon": "las la-align-center"}, {"function_call": "find_element_by_text(self, text)", "name": "Find element by text", "description": "Find one element by text. Text does not need to match exactly, part of text is enough.", "example": ">>> # Open the browser\n>>> browser = Chrome()\n>>> # Go to a website\n>>> browser.get('https://nytimes.com')\n>>> # Find elements by text\n>>> browser.find_element_by_text('world')\nwebelement\n", "snippet": "# Open the browser\nbrowser = Chrome()\n# Go to a website\nbrowser.get('https://nytimes.com')\n# Find elements by text\nbrowser.find_element_by_text('world')\n", "keywords": ["element", "element by text", "chrome", "internet", "browsing", "browser", "surfing", "web", "webscraping", "www", "selenium", "crawling", "webtesting", "mozilla", "firefox", "internet explorer"], "icon": "las la-align-center"}, {"function_call": "find_all_links(self)", "name": "Find all links", "description": "Find all links on a webpage in the browser", "example": ">>> # Open the browser\n>>> browser = Chrome()\n>>> # Go to a website\n>>> browser.get('https://nytimes.com')\n>>> # Find elements by text\n>>> browser.find_all_links()\n[webelement1, webelement2 , .. ]\n", "snippet": "# Open the browser\nbrowser = Chrome()\n# Go to a website\nbrowser.get('https://nytimes.com')\n# Find elements by text\nbrowser.find_all_links()\n", "keywords": ["random", "element", "element by text", "chrome", "internet", "browsing", "browser", "surfing", "web", "webscraping", "www", "selenium", "crawling", "webtesting", "mozilla", "firefox", "internet explorer"], "icon": "las la-window-restore"}, {"function_call": "highlight(self, element)", "name": "Highlight element", "description": "Highlight elements in yellow in the browser", "example": ">>> # Open the browser\n>>> browser = Chrome()\n>>> # Go to a website\n>>> browser.get('https://wikipedia.org')\n>>> # Find all links\n>>> links = browser.find_all_links()\n>>> # Select first link to highlight for illustration\n>>> first_link = links[0]\n>>> # Highlight first link\n>>> browser.highlight(first_link)\n", "snippet": "# Open the browser\nbrowser = Chrome()\n# Go to a website\nbrowser.get('https://wikipedia.org')\n# Find all links\nlinks = browser.find_all_links()\n# Select first link to highlight for illustration\nfirst_link = links[0]\n# Highlight first link\nbrowser.highlight(first_link)\n", "keywords": ["element", "element by text", "chrome", "internet", "browsing", "browser", "surfing", "web", "webscraping", "www", "selenium", "crawling", "webtesting", "mozilla", "firefox", "internet explorer"], "icon": "las la-highlighter"}, {"function_call": "exit(self)", "name": "Exit the browser", "description": "Quit the browser by exiting gracefully. One can also use the native 'quit' function, e.g. 'browser.quit()'", "example": ">>> # Open the browser\n>>> browser = Chrome()\n>>> # Go to a website\n>>> browser.get('https://automagica.com')\n>>> # Close browser\n>>> browser.exit()\n", "snippet": "# Open the browser\nbrowser = Chrome()\n# Go to a website\nbrowser.get('https://automagica.com')\n# Close browser\nbrowser.exit()\n", "keywords": ["quit", "exit", "close", "element", "element by text", "chrome", "internet", "browsing", "browser", "surfing", "web", "webscraping", "www", "selenium", "crawling", "webtesting", "mozilla", "firefox", "internet explorer"], "icon": "las la-window-close"}, {"function_call": "find_all_xpaths(self, element)", "name": "Find all XPaths", "description": "Find all elements with specified xpath on a webpage in the the browser. Can also use native 'find_elements_by_xpath' function e.g. browser.find_elements_by_xpath()You can easily", "example": ">>> # Open the browser\n>>> browser = Chrome()\n>>> # Go to a website\n>>> browser.get('https://wikipedia.org')\n>>> # Find element by xpath\n>>> browser.find_xpaths('//*[@id=\"js-link-box-en\"]')\n[webelement1, webelement2 , .. ]\n", "snippet": "# Open the browser\nbrowser = Chrome()\n# Go to a website\nbrowser.get('https://wikipedia.org')\n# Find element by xpath\nbrowser.find_xpaths('//*[@id=\"js-link-box-en\"]')\n", "keywords": ["random", "element", "xpath", "xml", "element by text", "chrome", "internet", "browsing", "browser", "surfing", "web", "webscraping", "www", "selenium", "crawling", "webtesting", "mozilla", "firefox", "internet explorer"], "icon": "las la-times"}, {"function_call": "find_xpath(self, element)", "name": "Find XPath in browser", "description": "Find all element with specified xpath on a webpage in the the browser. Can also use native 'find_elements_by_xpath' function e.g. browser.find_element_by_xpath()", "example": ">>> # Open the browser\n>>> browser = Chrome()\n>>> # Go to a website\n>>> browser.get('https://wikipedia.org')\n>>> # Find element by xpath\n>>> elements = browser.find_xpath('//*[@id=\"js-link-box-en\"]')\n>>> # We can now use this element, for example to click on\n>>> element.click()\n", "snippet": "# Open the browser\nbrowser = Chrome()\n# Go to a website\nbrowser.get('https://wikipedia.org')\n# Find element by xpath\nelements = browser.find_xpath('//*[@id=\"js-link-box-en\"]')\n# We can now use this element, for example to click on\nelement.click()\n", "keywords": ["random", "xpath", "element", "xml element by text", "chrome", "internet", "browsing", "browser", "surfing", "web", "webscraping", "www", "selenium", "crawling", "webtesting", "mozilla", "firefox", "internet explorer"], "icon": "las la-times"}]}, {"name": "Credential Management", "icon": "las la-key", "activities": [{"function_call": "set_credential(username=None, password=None, system=\"Automagica\")", "name": "Set credential", "description": "Add a credential which stores credentials locally and securely. All parameters should be Unicode text.", "example": ">>> set_credential('SampleUsername', 'SamplePassword')\n", "snippet": "set_credential('SampleUsername', 'SamplePassword')\n", "keywords": ["credential", "login", "password", "username", "store", "vault", "secure", "credentials", "store", "log in", "encrypt"], "icon": "las la-key"}, {"function_call": "delete_credential(username=None, password=None, system=\"Automagica\")", "name": "Delete credential", "description": "Delete a locally stored credential. All parameters should be Unicode text.", "example": ">>> set_credential('SampleUsername', 'SamplePassword')\n>>> delete_credential('SampleUsername', 'SamplePassword')\n", "snippet": "set_credential('SampleUsername', 'SamplePassword')\ndelete_credential('SampleUsername', 'SamplePassword')\n", "keywords": ["credential", "delete", "login", "password", "username", "store", "vault", "secure", "credentials", "store", "log in", "encrypt"], "icon": "las la-key"}, {"function_call": "get_credential(username=None, system=\"Automagica\")", "name": "Get credential", "description": "Get a locally stored redential. All parameters should be Unicode text.", "example": ">>> set_credential('SampleUsername', 'SamplePassword')\n>>> get_credential('SampleUsername')\n'SamplePassword'\n", "snippet": "set_credential('SampleUsername', 'SamplePassword')\nget_credential('SampleUsername')\n", "keywords": ["credential", "get", "delete", "login", "password", "username", "store", "vault", "secure", "credentials", "store", "log in", "encrypt"], "icon": "las la-key"}]}, {"name": "FTP", "icon": "las la-key", "activities": [{"function_call": "__init__(self, server, username, password)", "name": "Create FTP connection", "description": "Can be used to automate activites for FTP", "example": ">>> # This example uses the Rebex FPT test server.\n>>> # Take caution uploading and downloading from this server as it is public\n>>> ftp = FTP('test.rebex.net', 'demo', 'password')\n", "snippet": "# This example uses the Rebex FPT test server.\n# Take caution uploading and downloading from this server as it is public\nftp = FTP('test.rebex.net', 'demo', 'password')\n", "keywords": ["FTP", "file transfer protocol", "filezilla", "winscp", "server", "remote", "folder", "folders"], "icon": "las la-folder-open"}, {"function_call": "download_file(self, input_path, output_path=None)", "name": "Download file", "description": "Downloads a file from FTP server. Connection needs to be established first.", "example": ">>> # This example uses the Rebex FPT test server.\n>>> # Take caution uploading and downloading from this server as it is public\n>>> ftp = FTP('test.rebex.net', 'demo', 'password')\n>>> # Download Rebex public file 'readme.txt'\n>>> ftp.download_file('readme.txt')\n'C:\\\\Users\\\\<username>\\\\readme_downloaded.txt'\n", "snippet": "# This example uses the Rebex FPT test server.\n# Take caution uploading and downloading from this server as it is public\nftp = FTP('test.rebex.net', 'demo', 'password')\n# Download Rebex public file 'readme.txt'\nftp.download_file('readme.txt')\n", "keywords": ["FTP", "file transfer protocol", "download", "filezilla", "winscp", "server", "remote", "folder", "folders"], "icon": "las la-download"}, {"function_call": "upload_file(self, input_path, output_path=None)", "name": "Upload file", "description": "Upload file to FTP server", "example": ">>> # This example uses the Rebex FPT test server.\n>>> # Take caution uploading and downloading from this server as it is public\n>>> ftp = FTP('test.rebex.net', 'demo', 'password')\n>>> # Create a .txt file for illustration\n>>> textfile = make_textfile()\n>>> # Upload file to FTP test server\n>>> # Not that this might result in a persmission error for public FPT's\n>>> ftp.upload_file(textfile)\n", "snippet": "# This example uses the Rebex FPT test server.\n# Take caution uploading and downloading from this server as it is public\nftp = FTP('test.rebex.net', 'demo', 'password')\n# Create a .txt file for illustration\ntextfile = make_textfile()\n# Upload file to FTP test server\n# Not that this might result in a persmission error for public FPT's\nftp.upload_file(textfile)\n", "keywords": ["FTP", "upload", "fptfile transfer protocol", "filezilla", "winscp", "server", "remote", "folder", "folders"], "icon": "las la-upload"}, {"function_call": "enumerate_files(self, path=\"/\")", "name": "List FTP files", "description": "Generate a list of all the files in the FTP directory", "example": ">>> # This example uses the Rebex FPT test server.\n>>> # Take caution uploading and downloading from this server as it is public\n>>> ftp = FTP('test.rebex.net', 'demo', 'password')\n>>> # Show all files in main directory\n>>> ftp.enumerate_files()\n10-27-15  03:46PM       <DIR>          pub\n04-08-14  03:09PM                  403 readme.txt\n'226 Transfer complete.'\n", "snippet": "# This example uses the Rebex FPT test server.\n# Take caution uploading and downloading from this server as it is public\nftp = FTP('test.rebex.net', 'demo', 'password')\n# Show all files in main directory\nftp.enumerate_files()\n", "keywords": ["FTP", "list", "upload", "fptfile transfer protocol", "filezilla", "winscp", "server", "remote", "folder", "folders"], "icon": "las la-list-ol"}, {"function_call": "directory_exists(self, path=\"/\")", "name": "Check FTP directory", "description": "Check if FTP directory exists", "example": ">>> # This example uses the Rebex FPT test server.\n>>> # Take caution uploading and downloading from this server as it is public\n>>> ftp = FTP('test.rebex.net', 'demo', 'password')\n>>> # Check if 'pub' folder exists in main directory\n>>> ftp.directory_exists('\\\\pub')\nTrue\n", "snippet": "# This example uses the Rebex FPT test server.\n# Take caution uploading and downloading from this server as it is public\nftp = FTP('test.rebex.net', 'demo', 'password')\n# Check if 'pub' folder exists in main directory\nftp.directory_exists('\\\\pub')\n", "keywords": ["FTP", "list", "upload", "fptfile transfer protocol", "filezilla", "winscp", "server", "remote", "folder", "folders"], "icon": "las la-list-ol"}, {"function_call": "create_directory(self, directory_name, path=\"/\")", "name": "Create FTP directory", "description": "Create a FTP directory. Note that sufficient permissions are present", "example": ">>> # This example uses the Rebex FPT test server.\n>>> # Trying to create a directory will most likely fail due to permission\n>>> ftp = FTP('test.rebex.net', 'demo', 'password')\n>>> # Create directory\n>>> ftp.create_directory('brand_new_directory')      \nFalse\n", "snippet": "# This example uses the Rebex FPT test server.\n# Trying to create a directory will most likely fail due to permission\nftp = FTP('test.rebex.net', 'demo', 'password')\n# Create directory\nftp.create_directory('brand_new_directory')      \n", "keywords": ["FTP", "create", "create folder", "new", "new folder", "fptfile transfer protocol", "filezilla", "winscp", "server", "remote", "folder", "folders"], "icon": "las la-folder-plus"}]}, {"name": "Keyboard", "icon": "las la-keyboard", "activities": [{"function_call": "press_key(key=None)", "name": "Press key", "description": "Press and release an entered key. Make sure your keyboard is on US layout (standard QWERTY).If you are using this on Mac Os you might need to grant acces to your terminal application. (Security Preferences > Security & Privacy > Privacy > Accessibility)", "example": ">>> # Open notepad to illustrate typing\n>>> run('notepad.exe')\n>>> # Press some keys\n>>> press_key('a')\n>>> press_key('enter')\n>>> press_key('b')\n>>> press_key('enter')\n>>> press_key('c')\n", "snippet": "# Open notepad to illustrate typing\nrun('notepad.exe')\n# Press some keys\npress_key('a')\npress_key('enter')\npress_key('b')\npress_key('enter')\npress_key('c')\n", "keywords": ["keyboard", "typing", "type", "key", "keystroke", "hotkey", "press", "press key"], "icon": "las la-keyboard"}, {"function_call": "press_key_combination(first_key, second_key, third_key=None, force_pyautogui=False)", "name": "Press key combination", "description": "Press a combination of two or three keys simultaneously. Make sure your keyboard is on US layout (standard QWERTY).", "example": ">>> # Open notepad to illustrate typing\n>>> run('notepad.exe')\n>>> # Press 'ctrl + s' to prompt save window \n>>> press_key_combination('ctrl', 's')\n", "snippet": "# Open notepad to illustrate typing\nrun('notepad.exe')\n# Press 'ctrl + s' to prompt save window \npress_key_combination('ctrl', 's')\n", "keywords": ["keyboard", "key combination", "shortcut", "typing", "type", "key", "keystroke", "hotkey", "press", "press key"], "icon": "las la-keyboard"}, {"function_call": "type_text(text='', interval_seconds=0.01)", "name": "Type text", "description": "Types text in the current active field by simulating keyboard typing.  Make sure your keyboard is on US layout (standard QWERTY).", "example": ">>> # Open notepad to illustrate typing\n>>> run('notepad.exe')\n>>> # Type a story\n>>> type_text('Why was the robot mad? \\n They kept pushing his buttons!')\n", "snippet": "# Open notepad to illustrate typing\nrun('notepad.exe')\n# Type a story\ntype_text('Why was the robot mad? \\n They kept pushing his buttons!')\n", "keywords": ["keyboard", "keystrokes", "key combination", "shortcut", "typing", "type", "key", "keystroke", "hotkey", "press", "press key"], "icon": "las la-keyboard"}]}, {"name": "Mouse", "icon": "las la-mouse-pointer", "activities": [{"function_call": "get_mouse_position(delay=None, to_clipboard=False)", "name": "Get mouse coordinates", "description": "Get the x and y pixel coordinates of current mouse position.These coordinates represent the absolute pixel position of the mouse on the computer screen. The x-co\u00f6rdinate starts on the left side and increases going right. The y-co\u00f6rdinate increases going down.", "example": ">>> get_mouse_position()\n(314, 271)\n", "snippet": "get_mouse_position()\n", "keywords": ["mouse", "mouse automation", "click", "right click", "mouse button", "move mouse", "position", "pixel"], "icon": "las la-mouse"}, {"function_call": "display_mouse_position(duration=10)", "name": "Display mouse position", "description": "Displays mouse position in an overlay. Refreshes every two seconds. Can be used to find mouse position of element on the screen.These coordinates represent the absolute pixel position of the mouse on the computer screen. The x-co\u00f6rdinate starts on the left side and increases going right. The y-co\u00f6rdinate increases going down.", "example": ">>> display_mouse_position()\n", "snippet": "display_mouse_position()\n", "keywords": ["mouse", "osd", "overlay", "show", "display", "mouse automation", "click", "right click", "mouse button", "move mouse", "position", "pixel"], "icon": "lars la-search-location"}, {"function_call": "click(x=None, y=None)", "name": "Mouse click", "description": "Clicks on a pixel position on the visible screen determined by x and y coordinates.", "example": ">>> click(x=100, y=100)\n", "snippet": "click(x=100, y=100)\n", "keywords": ["mouse", "osd", "overlay", "show", "display", "mouse automation", "click", "right click", "mouse button", "move mouse", "position", "pixel"], "icon": "las la-mouse-pointer"}, {"function_call": "double_click(x=None, y=None)", "name": "Double mouse click", "description": "Double clicks on a pixel position on the visible screen determined by x and y coordinates.", "example": ">>> double_click(x=100, y=100)\n", "snippet": "double_click(x=100, y=100)\n", "keywords": ["mouse", "osd", "overlay", "double", "double click", "doubleclick show", "display", "mouse automation", "click", "right click", "mouse button", "move mouse", "position", "pixel"], "icon": "las la-mouse-pointer"}, {"function_call": "right_click(x=None, y=None)", "name": "Right click", "description": "Right clicks on a pixel position on the visible screen determined by x and y coordinates.", "example": ">>> right_click(x=100, y=100)\n", "snippet": "right_click(x=100, y=100)\n", "keywords": ["mouse", "osd", "right click", "right", "rightclick", "overlay", "show", "display", "mouse automation", "click", "right click", "mouse button", "move mouse", "position", "pixel"], "icon": "las la-mouse-pointer"}, {"function_call": "move_mouse_to(x=None, y=None)", "name": "Move mouse", "description": "Moves te pointer to a x-y position.", "example": ">>> move_mouse_to(x=100, y=100)\n", "snippet": "move_mouse_to(x=100, y=100)\n", "keywords": ["mouse", "osd", "move mouse", "right click", "right", "rightclick", "overlay", "show", "display", "mouse automation", "click", "right click", "mouse button", "move mouse", "position", "pixel"], "icon": "las la-arrows-alt"}, {"function_call": "move_mouse_relative(x=None, y=None)", "name": "Move mouse relative", "description": "Moves the mouse an x- and y- distance relative to its current pixel position.", "example": ">>> move_mouse_to(x=100, y=100)\n>>> wait(1)\n>>> move_mouse_relative(x=10, y=10)\n", "snippet": "move_mouse_to(x=100, y=100)\nwait(1)\nmove_mouse_relative(x=10, y=10)\n", "keywords": ["mouse", "osd", "move mouse", "right click", "right", "rightclick", "overlay", "show", "display", "mouse automation", "click", "right click", "mouse button", "move mouse", "position", "pixel"], "icon": "las la-arrows-alt"}, {"function_call": "drag_mouse_to(x=None, y=None, button=\"left\")", "name": "Drag mouse", "description": "Drag the mouse from its current position to a entered x-y position, while holding a specified button.", "example": ">>> move_mouse_to(x=100, y=100)\n>>> drag_mouse_to(x=1, y=1)\n", "snippet": "move_mouse_to(x=100, y=100)\ndrag_mouse_to(x=1, y=1)\n", "keywords": ["mouse", "osd", "move mouse", "right click", "right", "rightclick", "overlay", "show", "display", "mouse automation", "click", "right click", "mouse button", "move mouse", "position", "pixel"], "icon": "las la-arrows-alt"}]}, {"name": "Image", "icon": "las la-image", "activities": [{"function_call": "random_screen_snippet(size=100, path=None)", "name": "Random screen snippet", "description": "Take a random square snippet from the current screen. Mainly for testing and/or development purposes.", "example": ">>> random_screen_snippet()\n'C:\\\\Users\\\\<username>\\\\random_screensnippet.jpg'\n", "snippet": "random_screen_snippet()\n", "keywords": ["image", "random", "testing", "screengrab", "snippet"], "icon": "las la-crop-alt"}, {"function_call": "take_screenshot(path=None)", "name": "Screenshot", "description": "Take a screenshot of current screen.", "example": ">>> take_screenshot\n'C:\\\\Users\\\\<username>\\\\screenshot.jpg'\n", "snippet": "take_screenshot\n", "keywords": ["image", "screenshot", "printscreen,"], "icon": "las la-expand"}, {"function_call": "click_image(filename=None)", "name": "Click on image", "description": "This function searches the screen for a match with template image and clicks directly in the middle. Note that this only finds exact matches.For a more advanced and robust vision detection method see Automagica AI functionality.", "example": ">>> # Create a random snippet from current screen\n>>> # This is for illustration and can be replaced by template\n>>> snippet = random_screen_snippet(size=10)\n>>> # Click on the snippet\n>>> click_image(snippet)\n", "snippet": "# Create a random snippet from current screen\n# This is for illustration and can be replaced by template\nsnippet = random_screen_snippet(size=10)\n# Click on the snippet\nclick_image(snippet)\n", "keywords": ["image matching", "matching", "vision", "button", "click", "template", "template matching."], "icon": "las la-image"}, {"function_call": "double_click_image(filename=None)", "name": "Double click image", "description": "Double click on similar image on the screen. This function searches the screen for a match with template image and doubleclicks directly in the middle.Note that this only finds exact matches. For a more advanced and robust vision detection method see Automagica AI functionality.", "example": ">>> # Create a random snippet from current screen\n>>> # This is for illustration and can be replaced by template\n>>> snippet = random_screen_snippet(size=10)\n>>> # Click on the snippet\n>>> double_click_image(snippet)\n", "snippet": "# Create a random snippet from current screen\n# This is for illustration and can be replaced by template\nsnippet = random_screen_snippet(size=10)\n# Click on the snippet\ndouble_click_image(snippet)\n", "keywords": ["image matching", "matching", "vision", "button", "double click", "template", "template matching,click"], "icon": "las la-image"}, {"function_call": "right_click_image(filename=None)", "name": "Right click image", "description": "Right click on similar image on the screen. This function searches the screen for a match with template image and right clicks directly in the middle.Note that this only finds exact matches. For a more advanced and robust vision detection method see Automagica AI functionality.", "example": ">>> # Create a random snippet from current screen\n>>> # This is for illustration and can be replaced by template\n>>> snippet = random_screen_snippet(size=10)\n>>> # Click on the snippet\n>>> right_click_image(snippet)\n", "snippet": "# Create a random snippet from current screen\n# This is for illustration and can be replaced by template\nsnippet = random_screen_snippet(size=10)\n# Click on the snippet\nright_click_image(snippet)\n", "keywords": ["image matching", "matching", "vision", "button", "right click", "template", "template matching", "click"], "icon": "las la-image"}, {"function_call": "locate_image_on_screen(filename=None)", "name": "Locate image on screen", "description": "Find exact image on the screen. This function searches the screen for a match with template image and clicks directly in the middle.Note that this only finds exact matches. For a more advanced and robust vision detection method see Automagica AI functionality.", "example": ">>> # Create a random snippet from current screen\n>>> # This is for illustration and can be replaced by template\n>>> snippet = random_screen_snippet(size=10)\n>>> # Click on the snippet\n>>> locate_image_on_screen(snippet)\n", "snippet": "# Create a random snippet from current screen\n# This is for illustration and can be replaced by template\nsnippet = random_screen_snippet(size=10)\n# Click on the snippet\nlocate_image_on_screen(snippet)\n", "keywords": ["image matching", "matching", "vision", "button", "right click", "template", "template matching", "click"], "icon": "las la-image"}]}, {"name": "Folder Operations", "icon": "las la-folder-open", "activities": [{"function_call": "get_files_in_folder(path=None, extension=None, show_full_path=True, scan_subfolders=False)", "name": "List files in folder", "description": "List all files in a folder (and subfolders)Checks all folders and subfolders for files. This could take some time for large repositories.", "example": ">>> # List all files in the homedirectory\n>>> get_files_in_folder()\n['C:\\\\Users\\\\<username>\\\\file1.jpg', 'C:\\\\Users\\\\<username>\\\\file2.txt', ... ]\n", "snippet": "# List all files in the homedirectory\nget_files_in_folder()\n", "keywords": ["folder", "files", "explorer", "nautilus", "folder", "file", "create folder", "get files", "list files", "all files", "overview", "get files"], "icon": "las la-search"}, {"function_call": "create_folder(path=None)", "name": "Create folder", "description": "Creates new folder at the given path.", "example": ">>> # Create folder in the home directory\n>>> create_folder()\n'C:\\\\Users\\\\<username>\\\\new_folder'\n", "snippet": "# Create folder in the home directory\ncreate_folder()\n", "keywords": ["create folder", "folder", "folders", "make folder", "new folder", "folder manipulation", "explorer", "nautilus"], "icon": "las la-folder-plus"}, {"function_call": "rename_folder(input_path, new_name=None)", "name": "Rename folder", "description": "Rename a folder", "example": ">>> # Make new folder in home directory for illustration\n>>> testfolder = create_folder()\n>>> # Rename the folder\n>>> rename_folder(testfolder, new_name='testfolder_brand_new_name')\n'C:\\\\Users\\\\<username>\\\\testfolder_brand_new_name'\n", "snippet": "# Make new folder in home directory for illustration\ntestfolder = create_folder()\n# Rename the folder\nrename_folder(testfolder, new_name='testfolder_brand_new_name')\n", "keywords": ["folder", "rename", "rename folder", "organise folder", "folders", "folder manipulation", "explorer", "nautilus"], "icon": "las la-folder"}, {"function_call": "show_folder(path=None)", "name": "Open a folder", "description": "Open a folder with the default explorer.", "example": ">>> # Make new folder in home directory for illustration\n>>> testfolder = create_folder()\n>>> # Open folder\n>>> show_folder(testfolder)\n'C:\\\\Users\\\\<username>\\\\new_folder'\n", "snippet": "# Make new folder in home directory for illustration\ntestfolder = create_folder()\n# Open folder\nshow_folder(testfolder)\n", "keywords": ["folder", "open", "open folder", "explorer", "nautilus"], "icon": "las la-folder-open"}, {"function_call": "move_folder(from_path, to_path)", "name": "Move a folder", "description": "Moves a folder from one place to another.If the new location already contains a folder with the same name, a random 4 character uid is added to the name.", "example": ">>> # Make new folder in home directory for illustration\n>>> # If no new_folder exists in home dir this will be called new_folder\n>>> testfolder = create_folder()\n>>> # Make a second new folder\n>>> # Since new_folder already exists this folder will get a random id added (in this case abc1)\n>>> testfolder_2 = create_folder()\n>>> # Move testfolder in testfolder_2\n>>> move_folder(testfolder, testfolder_2)\n'C:\\\\Users\\\\<username>\\\\new_folder_abc1\\\\new_folder'\n", "snippet": "# Make new folder in home directory for illustration\n# If no new_folder exists in home dir this will be called new_folder\ntestfolder = create_folder()\n# Make a second new folder\n# Since new_folder already exists this folder will get a random id added (in this case abc1)\ntestfolder_2 = create_folder()\n# Move testfolder in testfolder_2\nmove_folder(testfolder, testfolder_2)\n", "keywords": ["folder", "move", "move folder", "explorer", "nautilus", "folder manipulation"], "icon": "las la-folder"}, {"function_call": "remove_folder(path, allow_root=False, delete_read_only=True)", "name": "Remove folder", "description": "Remove a folder including all subfolders and files. For the function to work optimal, all files and subfolders in the main targetfolder should be closed.", "example": ">>> # Make new folder in home directory for illustration\n>>> testfolder = create_folder()\n>>> # Check if folder exists\n>>> print( folder_exists(testfolder) ) # Should print True\n>>> # Remove folder\n>>> remove_folder(testfolder)\n>>> # Check again if folder exists\n>>> folder_exists(testfolder)\nFalse\n", "snippet": "# Make new folder in home directory for illustration\ntestfolder = create_folder()\n# Check if folder exists\nprint( folder_exists(testfolder) ) # Should print True\n# Remove folder\nremove_folder(testfolder)\n# Check again if folder exists\nfolder_exists(testfolder)\n", "keywords": ["folder", "delete folder", "delete", "nautilus", "folder manipulation", "explorer", "delete folder", "remove", "remove folder"], "icon": "las la-folder-minus"}, {"function_call": "empty_folder(path, allow_root=False)", "name": "Empty folder", "description": "Remove all contents from a folderFor the function to work optimal, all files and subfolders in the main targetfolder should be closed.", "example": ">>> # Make new folder in home directory for illustration\n>>> testfolder = create_folder()\n>>> # Make new textfile in this folder\n>>> import os\n>>> textfile_location = os.path.join(testfolder, 'testfile.txt')\n>>> make_textfile(output_path=textfile_location )\n>>> # Print all files in the testfolder\n>>> print( get_files_in_folder(testfolder) ) # Should show \n>>> # Empty the folder\n>>> empty_folder(testfolder)\n>>> # Check what is in the folder\n>>> get_files_in_folder(testfolder)\n[]\n", "snippet": "# Make new folder in home directory for illustration\ntestfolder = create_folder()\n# Make new textfile in this folder\nimport os\ntextfile_location = os.path.join(testfolder, 'testfile.txt')\nmake_textfile(output_path=textfile_location )\n# Print all files in the testfolder\nprint( get_files_in_folder(testfolder) ) # Should show \n# Empty the folder\nempty_folder(testfolder)\n# Check what is in the folder\nget_files_in_folder(testfolder)\n", "keywords": ["folder", "empty folder", "delete", "empty", "clean", "clean folder", "nautilus", "folder manipulation", "explorer", "delete folder", "remove", "remove folder"], "icon": "las la-folder-minus"}, {"function_call": "folder_exists(path)", "name": "Checks if folder exists", "description": "Check whether folder exists or not, regardless if folder is empty or not.", "example": ">>> # Make new folder in home directory for illustration\n>>> testfolder = create_folder()\n>>> # Check if folder exists\n>>> folder_exists(testfolder)\nTrue\n", "snippet": "# Make new folder in home directory for illustration\ntestfolder = create_folder()\n# Check if folder exists\nfolder_exists(testfolder)\n", "keywords": ["folder", "folder exists", "nautilus", "explorer", "folder manipulation", "files"], "icon": "las la-folder"}, {"function_call": "copy_folder(from_path, to_path=None)", "name": "Copy a folder", "description": "Copies a folder from one place to another.If the new location already contains a folder with the same name, a random 4 character id is added to the name.", "example": ">>> # Make new folder in home directory for illustration\n>>> testfolder = create_folder()\n>>> # Copy this folder\n>>> # Since new_folder already exists in home dir this folder will get a random id added (in this case abc1)\n>>> copy_folder(testfolder)\n", "snippet": "# Make new folder in home directory for illustration\ntestfolder = create_folder()\n# Copy this folder\n# Since new_folder already exists in home dir this folder will get a random id added (in this case abc1)\ncopy_folder(testfolder)\n", "keywords": ["folder", "move", "move folder", "explorer", "nautilus", "folder manipulation"], "icon": "lar la-folder"}, {"function_call": "zip_folder(path, new_path=None)", "name": "Zip", "description": "Zia folder and it's contents. Creates a .zip file.", "example": ">>> # Make new folder in home directory for illustration\n>>> testfolder = create_folder()\n>>> # Zip this folder\n>>> zip_folder(testfolder)\n", "snippet": "# Make new folder in home directory for illustration\ntestfolder = create_folder()\n# Zip this folder\nzip_folder(testfolder)\n", "keywords": ["zip", "zipping", "winrar", "rar", "7zip", "compress", "unzip"], "icon": "las la-archive"}, {"function_call": "unzip(path, to_path=None)", "name": "Unzip", "description": "Unzips a file or folder from a .zip file.", "example": ">>> # Make new folder in home directory for illustration\n>>> testfolder = create_folder()\n>>> # Zip this folder\n>>> zipped_folder = zip_folder(testfolder)\n>>> # Unzip this folder\n>>> unzip(zipped_folder)\n", "snippet": "# Make new folder in home directory for illustration\ntestfolder = create_folder()\n# Zip this folder\nzipped_folder = zip_folder(testfolder)\n# Unzip this folder\nunzip(zipped_folder)\n", "keywords": ["zip", "zipping", "winrar", "rar", "7zip", "compress", "unzip"], "icon": "las la-archive"}]}, {"name": "Delay", "icon": "las la-hourglass", "activities": [{"function_call": "wait(seconds=1)", "name": "Wait", "description": "Make the robot wait for a specified number of seconds. Note that this activity is blocking. This means that subsequent activities will not occur until the the specified waiting time has expired.", "example": ">>> print('Start the wait')\n>>> wait()\n>>> print('The wait is over')\n", "snippet": "print('Start the wait')\nwait()\nprint('The wait is over')\n", "keywords": ["wait", "sleep", "time", "timeout", "time-out", "hold", "pause"], "icon": "las la-hourglass"}, {"function_call": "wait_for_image(path=None, timeout=60)", "name": "Wait for image", "description": "Waits for an image to appear on the screenNote that this activity waits for an exact match of the template image to appear on the screen.Small variations, such as color or resolution could result in a mismatch.", "example": ">>> # Create a random snippet from current screen\n>>> # This is for illustration and can be replaced by template\n>>> snippet = random_screen_snippet(size=10)\n>>> # Wait for the snippet to be visible\n>>> wait_for_image(snippet)\n", "snippet": "# Create a random snippet from current screen\n# This is for illustration and can be replaced by template\nsnippet = random_screen_snippet(size=10)\n# Wait for the snippet to be visible\nwait_for_image(snippet)\n", "keywords": ["image matching", "wait", "pause", "vision", "template", "template matching"], "icon": "las la-hourglass"}, {"function_call": "wait_folder_exists(path, timeout=60)", "name": "Wait for folder", "description": "Waits until a folder exists.Not that this activity is blocking and will keep the system waiting.", "example": ">>> # Create a random folder\n>>> testfolder = create_folder()\n>>> # Wait for the snippet to be visible\n>>> wait_folder_exists(testfolder)\n", "snippet": "# Create a random folder\ntestfolder = create_folder()\n# Wait for the snippet to be visible\nwait_folder_exists(testfolder)\n", "keywords": ["image matching", "wait", "pause", "vision", "template", "template matching"], "icon": "las la-hourglass"}]}, {"name": "Word Application", "icon": "las la-file-word", "activities": [{"function_call": "__init__(self, visible=True, file_path=None)", "name": "Start Word Application", "description": "For this activity to work, Microsoft Office Word needs to be installed on the system.", "example": ">>> word = Word()\n", "snippet": "word = Word()\n", "keywords": ["word", "editor", "text", "text edit", "office", "document", "microsoft word", "doc", "docx"], "icon": "lar la-file-word"}, {"function_call": "append_text(self, text)", "name": "Append text", "description": "Append text at end of Word document.", "example": ">>> # Start Word\n>>> word = Word()\n>>> word.append_text('This is sample text')\n", "snippet": "# Start Word\nword = Word()\nword.append_text('This is sample text')\n", "keywords": ["word", "editor", "text", "text edit", "office", "document", "microsoft word", "doc", "docx"], "icon": "lar la-file-word"}, {"function_call": "replace_text(self, placeholder_text, replacement_text)", "name": "Replace text", "description": "Can be used for example to replace arbitrary placeholder value. For example whenusing template document, using 'XXXX' as a placeholder. Take note that all strings are case sensitive.", "example": ">>> # Start Word\n>>> word = Word()\n>>> word.append_text('This is sample text')\n>>> word.replace_text('sample', 'real')\n", "snippet": "# Start Word\nword = Word()\nword.append_text('This is sample text')\nword.replace_text('sample', 'real')\n", "keywords": ["word", "replace", "text", "template"], "icon": "lar la-file-word"}, {"function_call": "read_all_text(self, return_as_list=False)", "name": "Read all text", "description": "Read all the text from a document", "example": ">>> # Start Word\n>>> word = Word()\n>>> word.append_text('This is sample text')\n>>> word.replace_text('sample', 'real')\n>>> word.read_all_text()\n'This is real text'\n", "snippet": "# Start Word\nword = Word()\nword.append_text('This is sample text')\nword.replace_text('sample', 'real')\nword.read_all_text()\n", "keywords": ["word", "extract", "text", "document"], "icon": "lar la-file-word"}, {"function_call": "export_to_pdf(self, path=None)", "name": "Export to PDF", "description": "Export the document to PDF", "example": ">>> # Start Word\n>>> word = Word()\n>>> word.append_text('This is sample text')\n>>> word.replace_text('sample', 'real')\n>>> word.export_to_pdf('output.pdf')\n", "snippet": "# Start Word\nword = Word()\nword.append_text('This is sample text')\nword.replace_text('sample', 'real')\nword.export_to_pdf('output.pdf')\n", "keywords": ["word", "pdf", "document", "export", "save as"], "icon": "lar la-file-pdf"}, {"function_call": "export_to_html(self, path=None)", "name": "Export to HTML", "description": "Export to HTML", "example": ">>> # Start Word\n>>> word = Word()\n>>> word.append_text('This is sample text')\n>>> word.replace_text('sample', 'real')\n>>> word.export_to_html('output.html')\n", "snippet": "# Start Word\nword = Word()\nword.append_text('This is sample text')\nword.replace_text('sample', 'real')\nword.export_to_html('output.html')\n", "keywords": ["word", "html", "document", "export", "save as"], "icon": "las la-html5"}, {"function_call": "set_footers(self, text)", "name": "Set footers", "description": "Set the footers of the document", "example": ">>> # Start Word\n>>> word = Word()\n>>> word.set_footers('This is a footer!')\n", "snippet": "# Start Word\nword = Word()\nword.set_footers('This is a footer!')\n", "keywords": ["word", "footer", "footers"], "icon": "las la-heading"}, {"function_call": "set_headers(self, text)", "name": "Set headers", "description": "Set the headers of the document", "example": ">>> # Start Word\n>>> word = Word()\n>>> word.set_headers('This is a header!')\n", "snippet": "# Start Word\nword = Word()\nword.set_headers('This is a header!')\n", "keywords": ["word", "header", "headers"], "icon": "las la-subscript"}]}, {"name": "Word File", "icon": "las la-file-word", "activities": [{"function_call": "__init__(self, file_path=None)", "name": "Read and Write Word files", "description": "These activities can read, write and edit Word (docx) files without the need of having Word installed.Note that, in contrary to working with the :func: 'Word' activities, a file get saved directly after manipulation.", "example": ">>> wordfile = WordFile()\n>>> wordfile.append_text('Some sample text')\n>>> wordfile.read_all_text()\n'Some sample text'\n", "snippet": "wordfile = WordFile()\nwordfile.append_text('Some sample text')\nwordfile.read_all_text()\n", "keywords": ["word", "read", "text", "file"], "icon": "las la-file-word"}, {"function_call": "read_all_text(self, return_as_list=False)", "name": "Read all text", "description": "Read all the text from the document", "example": ">>> wordfile = WordFile()\n>>> wordfile.append_text('Some sample text')\n>>> wordfile.read_all_text()\n'Some sample text'\n", "snippet": "wordfile = WordFile()\nwordfile.append_text('Some sample text')\nwordfile.read_all_text()\n", "keywords": ["word", "read", "text", "file"], "icon": "las la-file-word"}, {"function_call": "append_text(self, text, auto_save=True)", "name": "Append text", "description": "Append text at the end of the document", "example": ">>> wordfile = WordFile()\n>>> wordfile.append_text('Some sample text')\n", "snippet": "wordfile = WordFile()\nwordfile.append_text('Some sample text')\n", "keywords": ["word", "append text", "add text"], "icon": "las la-file-word"}, {"function_call": "save(self)", "name": "Save", "description": "Save document", "example": ">>> wordfile = WordFile()\n>>> wordfile.append_text('Some sample text')\n>>> wordfile.save()\n", "snippet": "wordfile = WordFile()\nwordfile.append_text('Some sample text')\nwordfile.save()\n", "keywords": ["word", "save", "store"], "icon": "las la-file-word"}, {"function_call": "save_as(self, path)", "name": "Save as", "description": ":Example:", "example": ">>> wordfile = WordFile()\n>>> wordfile.append_text('Some sample text')\n>>> wordfile.save_as('document.docx')\n", "snippet": "wordfile = WordFile()\nwordfile.append_text('Some sample text')\nwordfile.save_as('document.docx')\n", "keywords": ["word", "save as", "store"], "icon": "las la-file-word"}, {"function_call": "set_headers(self, text, auto_save=True)", "name": "Set headers", "description": "Set headers of Word document", "example": ">>> wordfile = WordFile()\n>>> wordfile.append_text('Some sample text')\n>>> wordfile.set_headers('This is a header')\n", "snippet": "wordfile = WordFile()\nwordfile.append_text('Some sample text')\nwordfile.set_headers('This is a header')\n", "keywords": ["word", "header text"], "icon": "las la-file-word"}, {"function_call": "replace_text(self, placeholder_text, replacement_text, auto_save=True)", "name": "Replace all", "description": "Replaces all occurences of a placeholder text in the document with a replacement text.", "example": ">>> wordfile = WordFile()\n>>> wordfile.append_text('Some sample text')\n>>> wordfile.replace_text('sample', 'real')\n", "snippet": "wordfile = WordFile()\nwordfile.append_text('Some sample text')\nwordfile.replace_text('sample', 'real')\n", "keywords": ["word", "replace text", "template"], "icon": "las la-file-word"}]}, {"name": "Outlook Application", "icon": "las la-envelope", "activities": [{"function_call": "__init__(self, account_name=None)", "name": "Start Outlook Application", "description": "For this activity to work, Outlook needs to be installed on the system.", "example": ">>> outlook = Outlook()\n", "snippet": "outlook = Outlook()\n", "keywords": ["outlook", "send e-mail", "send mail"], "icon": "las la-mail-bulk"}, {"function_call": "send_mail(self, to_address, subject=\"\", body=\"\", html_body=None, attachment_paths=None)", "name": "Send e-mail", "description": "Send an e-mail using Outlook", "example": ">>> outlook = Outlook()\n>>> outlook.send_mail('test@test.com', subject='Hello world', body='Hi there')\n", "snippet": "outlook = Outlook()\noutlook.send_mail('test@test.com', subject='Hello world', body='Hi there')\n", "keywords": ["outlook", "send e-mail", "send mail"], "icon": "las la-mail-bulk"}, {"function_call": "get_folders(self, limit=999)", "name": "Retrieve folders", "description": "Retrieve list of folders from Outlook", "example": ">>> outlook = Outlook()\n>>> outlook.get_folders()\n['Inbox', 'Sent', ...]\n", "snippet": "outlook = Outlook()\noutlook.get_folders()\n", "keywords": ["outlook", "get folders", "list folders"], "icon": "las la-mail-bulk"}, {"function_call": "get_mails(self, folder_name=\"Inbox\", fields=None)", "name": "Retrieve e-mails", "description": "Retrieve list of messages from Outlook", "example": ">>> outlook = Outlook()\n>>> outlook.get_mails()\n[\n    {\n        'Subject': 'Hello World!',\n        'Body' : 'This is an e-mail',\n        'SenderEmailAddress': 'from@test.com'\n    }\n]\n", "snippet": "outlook = Outlook()\noutlook.get_mails()\n    {\n        'Subject': 'Hello World!',\n        'Body' : 'This is an e-mail',\n        'SenderEmailAddress': 'from@test.com'\n    }\n", "keywords": ["outlook", "retrieve e-mail", "receive e-mails", "process e-mails", "get mails"], "icon": "las la-mail-bulk"}, {"function_call": "delete_mails(self,folder_name=\"Inbox\",limit=0,subject_contains=\"\",body_contains=\"\",sender_contains=\"\")", "name": "Delete e-mails", "description": "Deletes e-mail messages in a certain folder. Can be specified by searching on subject, body or sender e-mail.", "example": ">>> outlook = Outlook()\n>>> outlook.delete_mails(subject_contains=\"hello\")\n", "snippet": "outlook = Outlook()\noutlook.delete_mails(subject_contains=\"hello\")\n", "keywords": ["outlook", "remove e-mails", "delete mail", "remove mail"], "icon": "las la-mail-bulk"}, {"function_call": "move_mails(self,source_folder_name=\"Inbox\",target_folder_name=\"Archive\",limit=0,subject_contains=\"\",body_contains=\"\",sender_contains=\"\")", "name": "Move e-mails", "description": "Move e-mail messages in a certain folder. Can be specified by searching on subject, body or sender e-mail.", "example": ">>> outlook = Outlook()\n>>> outlook.move_mails(subject_contains=\"move me\")\n", "snippet": "outlook = Outlook()\noutlook.move_mails(subject_contains=\"move me\")\n", "keywords": ["outlook", "move e-mail", "move e-mail to folder"], "icon": "las la-mail-bulk"}, {"function_call": "save_attachments(self, folder_name=\"Inbox\", target_folder_path=None)", "name": "Save attachments", "description": ":parameter folder_name: Name of the Outlook folder, can be found using `get_folders`.:parameter target_folder_path: Path where attachments will be saved. Default is the home directory.", "example": ">>> outlook = Outlook()\n>>> outlook.save_attachments()\n['Attachment.pdf', 'Signature_image.jpeg']\n", "snippet": "outlook = Outlook()\noutlook.save_attachments()\n", "keywords": ["outlook", "save attachments", "download attachments", "extract attachments"], "icon": "las la-mail-bulk"}, {"function_call": "get_contacts(self, fields=None)", "name": "Retrieve contacts", "description": ":parameter fields: Fields can be specified as a tuple with their exact names. Standard value is None returning \"LastName\", \"FirstName\" and \"Email1Address\".", "example": ">>> outlook = Outlook()\n>>> outlook.get_contacts()\n[\n    {\n        'LastName': 'Doe',\n        'FirstName' : 'John',\n        'Email1Address': 'john@test.com'\n    }\n]\n", "snippet": "outlook = Outlook()\noutlook.get_contacts()\n    {\n        'LastName': 'Doe',\n        'FirstName' : 'John',\n        'Email1Address': 'john@test.com'\n    }\n", "keywords": ["outlook", "get contacts", "download contacts", "rolodex"], "icon": "las la-mail-bulk"}, {"function_call": "add_contact(self, email, first_name=\"\", last_name=\"\")", "name": "Add a contact", "description": "Add a contact to Outlook contacts", "example": ">>> outlook = Outlook()\n>>> outlook.add_contact('sales@automagica.com')\n", "snippet": "outlook = Outlook()\noutlook.add_contact('sales@automagica.com')\n", "keywords": ["outlook", "create contact", "add contact"], "icon": "las la-mail-bulk"}, {"function_call": "quit(self)", "name": "Quit", "description": "Close the Outlook application", "example": ">>> outlook = Outlook()\n>>> outlook.quit()\n", "snippet": "outlook = Outlook()\noutlook.quit()\n", "keywords": ["outlook", "close", "quit"], "icon": "las la-mail-bulk"}]}, {"name": "Excel Application", "icon": "las la-file-excel", "activities": [{"function_call": "__init__(self, visible=True, file_path=None)", "name": "Start Excel Application", "description": "For this activity to work, Microsoft Office Excel needs to be installed on the system.", "example": ">>> # Open Excel\n>>> excel = Excel()\n", "snippet": "# Open Excel\nexcel = Excel()\n", "keywords": ["excel", "add worksheet", "add tab"], "icon": "las la-file-excel"}, {"function_call": "add_worksheet(self, name=None)", "name": "Add worksheet", "description": "Adds a worksheet to the current workbook", "example": ">>> # Open Excel\n>>> excel = Excel()\n>>> # Add a worksheet\n>>> excel.add_worksheet('My Example Worksheet')\n", "snippet": "# Open Excel\nexcel = Excel()\n# Add a worksheet\nexcel.add_worksheet('My Example Worksheet')\n", "keywords": ["excel", "add worksheet", "add tab", "insert worksheet", "new worksheet"], "icon": "las la-file-excel"}, {"function_call": "activate_worksheet(self, name)", "name": "Activate worksheet", "description": "Activate a worksheet in the current Excel document by name", "example": ">>> # Open Excel   \n>>> excel = Excel()\n>>> # Add the first worksheet\n>>> excel.add_worksheet('My Example Worksheet')\n>>> # Add another worksheet\n>>> excel.add_worksheet('Another Worksheet')\n>>> # Activate the first worksheet\n>>> excel.activate_worksheet('My Example Worksheet)\n", "snippet": "# Open Excel   \nexcel = Excel()\n# Add the first worksheet\nexcel.add_worksheet('My Example Worksheet')\n# Add another worksheet\nexcel.add_worksheet('Another Worksheet')\n# Activate the first worksheet\nexcel.activate_worksheet('My Example Worksheet)\n", "keywords": ["excel", "activate worksheet", "set worksheet", "select worksheet", "select tab", "activate tab"], "icon": "las la-file-excel"}, {"function_call": "save(self)", "name": "Save", "description": "Save the current workbook", "example": ">>> # Open Excel\n>>> excel = Excel()\n>>> # Add the first worksheet\n>>> excel.add_worksheet('My Example Worksheet')\n>>> # Save the workbook to My Documents\n>>> excel.save()\n", "snippet": "# Open Excel\nexcel = Excel()\n# Add the first worksheet\nexcel.add_worksheet('My Example Worksheet')\n# Save the workbook to My Documents\nexcel.save()\n", "keywords": ["excel", "save", "store"], "icon": "las la-file-excel"}, {"function_call": "save_as(self, path)", "name": "Save as", "description": "Save the current workbook to a specific path", "example": ">>> # Open Excel\n>>> excel = Excel()\n>>> # Add the first worksheet\n>>> excel.add_worksheet('My Example Worksheet')\n>>> # Save the workbook to the current working directory\n>>> excel.save_as('output.xlsx')\n", "snippet": "# Open Excel\nexcel = Excel()\n# Add the first worksheet\nexcel.add_worksheet('My Example Worksheet')\n# Save the workbook to the current working directory\nexcel.save_as('output.xlsx')\n", "keywords": ["excel", "save as", "export"], "icon": "las la-file-excel"}, {"function_call": "write_cell(self, column, row, value)", "name": "Write cell", "description": "Write to a specific cell in the currently active workbook and active worksheet", "example": ">>> # Open Excel\n>>> excel = Excel()\n>>> # Add the first worksheet\n>>> excel.add_worksheet('My Example Worksheet')\n>>> # Insert a text into the first cell\n>>> excel.write_cell(1,1, 'Hello World!')\n", "snippet": "# Open Excel\nexcel = Excel()\n# Add the first worksheet\nexcel.add_worksheet('My Example Worksheet')\n# Insert a text into the first cell\nexcel.write_cell(1,1, 'Hello World!')\n", "keywords": ["excel", "cell", "insert cell", "insert data"], "icon": "las la-file-excel"}, {"function_call": "read_cell(self, column, row)", "name": "Read cell", "description": "Read a cell from the currently active workbook and active worksheet", "example": ">>> # Open Excel\n>>> excel = Excel()\n>>> # Add the first worksheet\n>>> excel.add_worksheet('My Example Worksheet')\n>>> # Insert a text into the first cell\n>>> excel.write_cell(1,1, 'Hello World!')\n>>> excel.read_cell(1,1)\n'Hello World!'\n", "snippet": "# Open Excel\nexcel = Excel()\n# Add the first worksheet\nexcel.add_worksheet('My Example Worksheet')\n# Insert a text into the first cell\nexcel.write_cell(1,1, 'Hello World!')\nexcel.read_cell(1,1)\n", "keywords": ["excel", "cell", "read cell", "read data"], "icon": "las la-file-excel"}, {"function_call": "write_range(self, range_, value)", "name": "Write range", "description": "Write to a specific range in the currently active worksheet in the active workbook", "example": ">>> # Open Excel\n>>> excel = Excel()\n>>> # Add the first worksheet\n>>> excel.add_worksheet('My Example Worksheet')\n>>> # Insert a text in every cell in this range\n>>> excel.write_range('A1:D5', 'Hello World!')\n", "snippet": "# Open Excel\nexcel = Excel()\n# Add the first worksheet\nexcel.add_worksheet('My Example Worksheet')\n# Insert a text in every cell in this range\nexcel.write_range('A1:D5', 'Hello World!')\n", "keywords": ["excel", "cell", "write range", "read data"], "icon": "las la-file-excel"}, {"function_call": "read_range(self, range_)", "name": "Read range", "description": "Read a range of cells from the currently active worksheet in the active workbook", "example": ">>> # Open Excel\n>>> excel = Excel()\n>>> # Add the first worksheet\n>>> excel.add_worksheet('My Example Worksheet')\n>>> # Insert a text in every cell in this range\n>>> excel.write_range('A1:D5', 'Hello World!')\n>>> # Read the same range\n>>> excel.read_range('A1:D5')\n[['Hello World', 'Hello World', 'Hello World', 'Hello World'], ...]\n", "snippet": "# Open Excel\nexcel = Excel()\n# Add the first worksheet\nexcel.add_worksheet('My Example Worksheet')\n# Insert a text in every cell in this range\nexcel.write_range('A1:D5', 'Hello World!')\n# Read the same range\nexcel.read_range('A1:D5')\n", "keywords": ["excel", "cell", "read range", "read data"], "icon": "las la-file-excel"}, {"function_call": "run_macro(self, name)", "name": "Run macro", "description": "Run a macro by name from the currently active workbook", "example": ">>> excel = Excel('excel_with_macro.xlsx')\n>>> # Run the macro\n>>> excel.run_macro('Macro1')\n", "snippet": "excel = Excel('excel_with_macro.xlsx')\n# Run the macro\nexcel.run_macro('Macro1')\n", "keywords": ["excel", "run macro", "run vba"], "icon": "las la-file-excel"}, {"function_call": "get_worksheet_names(self)", "name": "Get worksheet names", "description": "Get names of all the worksheets in the currently active workbook", "example": ">>> # Open Excel\n>>> excel = Excel()\n>>> # Add a worksheet\n>>> excel.add_worksheet('My Example Worksheet')\n>>> # Get all worksheet names\n>>> excel.get_worksheet_names()\n['Sheet1', 'My Example Worksheet']\n", "snippet": "# Open Excel\nexcel = Excel()\n# Add a worksheet\nexcel.add_worksheet('My Example Worksheet')\n# Get all worksheet names\nexcel.get_worksheet_names()\n", "keywords": ["excel", "worksheet names", "tab names"], "icon": "las la-file-excel"}, {"function_call": "get_table(self, name)", "name": "Get table", "description": "Get table data from the currently active worksheet by name of the table", "example": ">>> # Open Excel\n>>> excel = Excel()\n>>> # Create a table (Table1)\n>>> data = [\n    {\n        'Column A': 'Data Row 1 for A',\n        'Column B': 'Data Row 1 for B',\n        'Column C': 'Data Row 1 for C',\n    },\n    {\n        'Column A': 'Data Row 2 for A',\n        'Column B': 'Data Row 2 for B',\n        'Column C': 'Data Row 2 for C',\n    }]\n>>> excel.insert_data_as_table(data)\n>>> # Get the table\n>>> excel.get_table('Table1')\n[['Column A', 'Column B', 'Column C'], ['Row 1 A Data', 'Row 1 B Data', 'Row 1 C Data'], ...]\n", "snippet": "# Open Excel\nexcel = Excel()\n# Create a table (Table1)\ndata = [\n    {\n        'Column A': 'Data Row 1 for A',\n        'Column B': 'Data Row 1 for B',\n        'Column C': 'Data Row 1 for C',\n    },\n    {\n        'Column A': 'Data Row 2 for A',\n        'Column B': 'Data Row 2 for B',\n        'Column C': 'Data Row 2 for C',\n    }]\nexcel.insert_data_as_table(data)\n# Get the table\nexcel.get_table('Table1')\n", "keywords": ["excel", "worksheet names", "tab names"], "icon": "las la-file-excel"}, {"function_call": "activate_range(self, range_)", "name": "Activate range", "description": "Activate a particular range in the currently active workbook", "example": ">>> # Open Excel\n>>> excel = Excel()\n>>> # Activate a cell range\n>>> excel.activate_range('A1:D5')\n", "snippet": "# Open Excel\nexcel = Excel()\n# Activate a cell range\nexcel.activate_range('A1:D5')\n", "keywords": ["excel", "activate range", "make selection", "select cells", "select range"], "icon": "las la-file-excel"}, {"function_call": "activate_first_empty_cell_down(self)", "name": "Activate first empty cell down", "description": "Activates the first empty cell going down", "example": ">>> # Open Excel\n>>> excel = Excel()\n>>> # Write some cells\n>>> excel.write_cell(1, 1, 'Filled')\n>>> excel.write_cell(1, 2, 'Filled')\n>>> excel.write_cell(1, 3, 'Filled')\n>>> # Activate the first empty cell going down, in this case cell A4 or (1,4)\n>>> excel.activate_first_empty_cell_down()\n", "snippet": "# Open Excel\nexcel = Excel()\n# Write some cells\nexcel.write_cell(1, 1, 'Filled')\nexcel.write_cell(1, 2, 'Filled')\nexcel.write_cell(1, 3, 'Filled')\n# Activate the first empty cell going down, in this case cell A4 or (1,4)\nexcel.activate_first_empty_cell_down()\n", "keywords": ["excel", "first empty cell", "down"], "icon": "las la-file-excel"}, {"function_call": "activate_first_empty_cell_right(self)", "name": "Activate first empty cell right", "description": "Activates the first empty cell going right", "example": ">>> # Open Excel\n>>> excel = Excel()\n>>> # Write some cells\n>>> excel.write_cell(1, 1, 'Filled')\n>>> excel.write_cell(1, 2, 'Filled')\n>>> excel.write_cell(1, 3, 'Filled')\n>>> # Activate the first empty cell going right, in this case cell B1 or (2,1)\n>>> excel.activate_first_empty_cell_right()\n", "snippet": "# Open Excel\nexcel = Excel()\n# Write some cells\nexcel.write_cell(1, 1, 'Filled')\nexcel.write_cell(1, 2, 'Filled')\nexcel.write_cell(1, 3, 'Filled')\n# Activate the first empty cell going right, in this case cell B1 or (2,1)\nexcel.activate_first_empty_cell_right()\n", "keywords": ["excel", "first empty cell", "right"], "icon": "las la-file-excel"}, {"function_call": "activate_first_empty_cell_left(self)", "name": "Activate first empty cell left", "description": "Activates the first empty cell going left", "example": ">>> # Open Excel\n>>> excel = Excel()\n>>> excel.write_cell(1, 1, 'Filled')\n>>> excel.write_cell(1, 2, 'Filled')\n>>> excel.write_cell(1, 3, 'Filled')\n>>> excel.activate_first_empty_cell_left()\n", "snippet": "# Open Excel\nexcel = Excel()\nexcel.write_cell(1, 1, 'Filled')\nexcel.write_cell(1, 2, 'Filled')\nexcel.write_cell(1, 3, 'Filled')\nexcel.activate_first_empty_cell_left()\n", "keywords": ["excel", "first empty cell", "left"], "icon": "las la-file-excel"}, {"function_call": "activate_first_empty_cell_up(self)", "name": "Activate first empty cell up", "description": "Activates the first empty cell going up", "example": ">>> # Open Excel\n>>> excel = Excel()\n>>> # Write some cells\n>>> excel.write_cell(1, 1, 'Filled')\n>>> excel.write_cell(1, 2, 'Filled')\n>>> excel.write_cell(1, 3, 'Filled')\n>>> # Activate first empty cell\n>>> excel.activate_first_empty_cell_up()\n", "snippet": "# Open Excel\nexcel = Excel()\n# Write some cells\nexcel.write_cell(1, 1, 'Filled')\nexcel.write_cell(1, 2, 'Filled')\nexcel.write_cell(1, 3, 'Filled')\n# Activate first empty cell\nexcel.activate_first_empty_cell_up()\n", "keywords": ["excel", "first empty cell", "up"], "icon": "las la-file-excel"}, {"function_call": "write_cell_formula(self, column, row, formula)", "name": "Write cell formula", "description": "Write a formula to a particular cell", "example": ">>> # Open Excel\n>>> excel = Excel()\n>>> # Write a formula to the first cell\n>>> excel.write_cell_formula(1, 1, '=1+1)\n", "snippet": "# Open Excel\nexcel = Excel()\n# Write a formula to the first cell\nexcel.write_cell_formula(1, 1, '=1+1)\n", "keywords": ["excel", "insert formula", "insert calculation", "insert calculated cell"], "icon": "las la-file-excel"}, {"function_call": "read_cell_formula(self, column, row, formula)", "name": "Read cell formula", "description": "Read the formula from a particular cell", "example": ">>> # Open Excel\n>>> excel = Excel()\n>>> # Write a formula to the first cell\n>>> excel.write_cell_formula(1, 1, '=1+1)\n>>> # Read the cell\n>>> excel.read_cell_formula(1, 1)\n'=1+1'\n", "snippet": "# Open Excel\nexcel = Excel()\n# Write a formula to the first cell\nexcel.write_cell_formula(1, 1, '=1+1)\n# Read the cell\nexcel.read_cell_formula(1, 1)\n", "keywords": ["excel", "read formula", "read calculation"], "icon": "las la-file-excel"}, {"function_call": "insert_empty_row(self, row)", "name": "Insert empty row", "description": "Inserts an empty row to the currently active worksheet", "example": ">>> # Open Excel              \n>>> excel = Excel()\n>>> excel.write_cell(1, 1, 'Filled')\n>>> excel.write_cell(1, 2, 'Filled')\n>>> excel.write_cell(1, 3, 'Filled')\n>>> excel.insert_empty_row(2)\n", "snippet": "# Open Excel              \nexcel = Excel()\nexcel.write_cell(1, 1, 'Filled')\nexcel.write_cell(1, 2, 'Filled')\nexcel.write_cell(1, 3, 'Filled')\nexcel.insert_empty_row(2)\n", "keywords": ["excel", "insert row", "add row", "empty row"], "icon": "las la-file-excel"}, {"function_call": "insert_empty_column(self, column)", "name": "Insert empty column", "description": "Inserts an empty column in the currently active worksheet. Existing columns will shift to the right.", "example": ">>> # Open Excel\n>>> excel = Excel()\n>>> excel.write_cell(1, 1, 'Filled')\n>>> excel.write_cell(2, 2, 'Filled')\n>>> excel.write_cell(3, 3, 'Filled')\n>>> excel.insert_empty_column(2)\n", "snippet": "# Open Excel\nexcel = Excel()\nexcel.write_cell(1, 1, 'Filled')\nexcel.write_cell(2, 2, 'Filled')\nexcel.write_cell(3, 3, 'Filled')\nexcel.insert_empty_column(2)\n", "keywords": ["excel", "insert column", "add column"], "icon": "las la-file-excel"}, {"function_call": "delete_row(self, row)", "name": "Delete row in Excel", "description": "Deletes a row from the currently active worksheet. Existing data will shift up.", "example": ">>> # Open Excel              \n>>> excel = Excel()\n>>> excel.write_cell(1, 1, 'Filled')\n>>> excel.write_cell(2, 2, 'Filled')\n>>> excel.write_cell(3, 3, 'Filled')\n>>> excel.delete_row(2)\n", "snippet": "# Open Excel              \nexcel = Excel()\nexcel.write_cell(1, 1, 'Filled')\nexcel.write_cell(2, 2, 'Filled')\nexcel.write_cell(3, 3, 'Filled')\nexcel.delete_row(2)\n", "keywords": ["excel", "delete row", "remove row"], "icon": "las la-file-excel"}, {"function_call": "delete_column(self, range_)", "name": "Delete column", "description": "Delet a column from the currently active worksheet. Existing columns will shift to the left.", "example": ">>> # Open Excel              \n>>> excel = Excel()\n>>> excel.write_cell(1, 1, 'Filled')\n>>> excel.write_cell(2, 2, 'Filled')\n>>> excel.write_cell(3, 3, 'Filled')\n>>> excel.delete_column(2)\n", "snippet": "# Open Excel              \nexcel = Excel()\nexcel.write_cell(1, 1, 'Filled')\nexcel.write_cell(2, 2, 'Filled')\nexcel.write_cell(3, 3, 'Filled')\nexcel.delete_column(2)\n", "keywords": ["excel", "delete column", "remove column"], "icon": "las la-file-excel"}, {"function_call": "export_to_pdf(self, path=None)", "name": "Export to PDF", "description": ":parameter path: Output path where PDF file will be exported to. Default path is home directory with filename 'pdf_export.pdf'.", "example": ">>> # Open Excel              \n>>> excel = Excel()\n>>> excel.write_cell(1, 1, 'Filled')\n>>> excel.write_cell(2, 2, 'Filled')\n>>> excel.write_cell(3, 3, 'Filled')\n>>> excel.export_to_pdf('output.pdf')\n", "snippet": "# Open Excel              \nexcel = Excel()\nexcel.write_cell(1, 1, 'Filled')\nexcel.write_cell(2, 2, 'Filled')\nexcel.write_cell(3, 3, 'Filled')\nexcel.export_to_pdf('output.pdf')\n", "keywords": ["excel", "save as pdf", "export to pdf", "export as pdf"], "icon": "las la-file-excel"}, {"function_call": "insert_data_as_table(self, data, range_='A1', table_style=\"TableStyleMedium2\")", "name": "Insert data as table", "description": "Insert list of dictionaries as a table in Excel", "example": ">>> excel = Excel()\n>>> data = [\n    {\n        'Column A': 'Data Row 1 for A',\n        'Column B': 'Data Row 1 for B',\n        'Column C': 'Data Row 1 for C',\n    },\n    {\n        'Column A': 'Data Row 2 for A',\n        'Column B': 'Data Row 2 for B',\n        'Column C': 'Data Row 2 for C',\n    }\n>>> excel.insert_data_as_table(data)\n", "snippet": "excel = Excel()\ndata = [\n    {\n        'Column A': 'Data Row 1 for A',\n        'Column B': 'Data Row 1 for B',\n        'Column C': 'Data Row 1 for C',\n    },\n    {\n        'Column A': 'Data Row 2 for A',\n        'Column B': 'Data Row 2 for B',\n        'Column C': 'Data Row 2 for C',\n    }\nexcel.insert_data_as_table(data)\n", "keywords": ["excel", "insert data", "insert table", "create table"], "icon": "las la-file-excel"}, {"function_call": "read_worksheet(self, name=None, headers=False)", "name": "Read worksheet", "description": "Read data from a worksheet as a list of lists", "example": ">>> # Open excel    \n>>> excel = Excel()\n>>> Write some cells\n>>> excel.write_cell(1, 1, 'A')\n>>> excel.write_cell(1, 2, 'B')\n>>> excel.write_cell(1, 3, 'C')\n>>> excel.read_worksheet()\n[['A'],['B'],['C']]\n", "snippet": "# Open excel    \nexcel = Excel()\nWrite some cells\nexcel.write_cell(1, 1, 'A')\nexcel.write_cell(1, 2, 'B')\nexcel.write_cell(1, 3, 'C')\nexcel.read_worksheet()\n", "keywords": ["excel", "read worksheet", "export data", "read data"], "icon": "las la-file-excel"}, {"function_call": "quit(self)", "name": "Quit Excel", "description": "This closes Excel, make sure to use :func: 'save' or 'save_as' if you would like to save before quitting.", "example": ">>> # Open Excel  \n>>> excel = Excel()\n>>> # Quit Excel\n>>> excel.quit()\n", "snippet": "# Open Excel  \nexcel = Excel()\n# Quit Excel\nexcel.quit()\n", "keywords": ["excel", "exit", "quit", "close"], "icon": "las la-file-excel"}]}, {"name": "Excel File", "icon": "las la-file-excel", "activities": [{"function_call": "__init__(self, file_path=None)", "name": "Read and Write xlsx files.", "description": "This activity can read, write and edit Excel (xlsx) files without the need of having Excel installed.Note that, in contrary to working with the :func: 'Excel' activities, a file get saved directly after manipulation.", "example": ">>> # Open a new Excel file\n>>> excel_file = ExcelFile()\n", "snippet": "# Open a new Excel file\nexcel_file = ExcelFile()\n", "keywords": ["excel", "open", "start", "xlsx"], "icon": "las la-file-excel"}, {"function_call": "activate_worksheet(self, name)", "name": "Activate worksheet", "description": "Activate a worksheet. By default the first worksheet is activated.", "example": ">>> # Open a new Excel file\n>>> excel_file = ExcelFile()\n>>> # Add some worksheets\n>>> excel_file.add_worksheet('My Example Worksheet')\n>>> excel_file.add_worksheet('Another Worksheet')\n>>> # Activate a worksheet\n>>> excel_file.active_worksheet('My Example Worksheet')\n", "snippet": "# Open a new Excel file\nexcel_file = ExcelFile()\n# Add some worksheets\nexcel_file.add_worksheet('My Example Worksheet')\nexcel_file.add_worksheet('Another Worksheet')\n# Activate a worksheet\nexcel_file.active_worksheet('My Example Worksheet')\n", "keywords": ["excel", "activate tab", "activate worksheet"], "icon": "las la-file-excel"}, {"function_call": "save_as(self, path)", "name": "Save as", "description": ":parameter path: Path where workbook will be saved", "example": ">>> # Open a new Excel file\n>>> excel_file = ExcelFile()\n>>> # Ad a worksheet\n>>> excel_file.add_worksheet('My Example Worksheet')\n>>> # Save the Excel file\n>>> excel_file.save_as('output.xlsx')\n>>> # We can also save it in the home directory by using\n>>> excel_file.save_as( home_path('output.xlsx') )\n", "snippet": "# Open a new Excel file\nexcel_file = ExcelFile()\n# Ad a worksheet\nexcel_file.add_worksheet('My Example Worksheet')\n# Save the Excel file\nexcel_file.save_as('output.xlsx')\n# We can also save it in the home directory by using\nexcel_file.save_as( home_path('output.xlsx') )\n", "keywords": ["excel", "save as", "export", "save"], "icon": "las la-file-excel"}, {"function_call": "write_cell(self, column, row, value, auto_save=True)", "name": "Write cell", "description": ":parameter column: Column number (integer) to write:parameter row: Row number (integer) to write:parameter value: Value to write to specific cell:parameter auto_save: Save document after performing activity. Default value is True", "example": ">>> # Open a new Excel file\n>>> excel_file = ExcelFile()\n>>> # Add a worksheet\n>>> excel_file.add_worksheet('My Example Worksheet')\n>>> excel_file.write_cell(1, 1, 'Filled!')\n", "snippet": "# Open a new Excel file\nexcel_file = ExcelFile()\n# Add a worksheet\nexcel_file.add_worksheet('My Example Worksheet')\nexcel_file.write_cell(1, 1, 'Filled!')\n", "keywords": ["excel", "write cell", "insert data"], "icon": "las la-file-excel"}, {"function_call": "read_cell(self, column, row)", "name": "Read cell", "description": ":parameter column: Column number (integer) to read:parameter row: Row number (integer) to read", "example": ">>> # Open a new Excel file\n>>> excel_file = ExcelFile()\n>>> # Add a worksheet\n>>> excel_file.add_worksheet('My Example Worksheet')\n>>> # Write the first cell\n>>> excel_file.write_cell(1, 1, 'Filled!')\n>>> # Read the first cell\n>>> excel_file.read_cell(1, 1)\n'Filled!'\n", "snippet": "# Open a new Excel file\nexcel_file = ExcelFile()\n# Add a worksheet\nexcel_file.add_worksheet('My Example Worksheet')\n# Write the first cell\nexcel_file.write_cell(1, 1, 'Filled!')\n# Read the first cell\nexcel_file.read_cell(1, 1)\n", "keywords": ["excel", "read cell", "read"], "icon": "las la-file-excel"}, {"function_call": "add_worksheet(self, name, auto_save=True)", "name": "Add worksheet", "description": ":parameter name: Name of the worksheet to add:parameter auto_save: Save document after performing activity. Default value is True", "example": ">>> # Open a new Excel file\n>>> excel_file = ExcelFile()\n>>> # Add a worksheet\n>>> excel_file.add_worksheet('My Example Worksheet')\n>>> # List all the worksheets\n>>> excel.get_worksheet_names()\n", "snippet": "# Open a new Excel file\nexcel_file = ExcelFile()\n# Add a worksheet\nexcel_file.add_worksheet('My Example Worksheet')\n# List all the worksheets\nexcel.get_worksheet_names()\n", "keywords": ["excel", "add worksheet", "worksheet"], "icon": "las la-file-excel"}, {"function_call": "get_worksheet_names(self)", "name": "Get worksheet names", "description": ":return: List of worksheet names", "example": ">>> # Open a new Excel file\n>>> excel_file = ExcelFile()\n>>> # Add some worksheets\n>>> excel_file.add_worksheet('My Example Worksheet')\n>>> excel_file.add_worksheet('Another Worksheet')\n>>> # Get the worksheet names\n>>> excel_file.get_worksheet_names()\n['My Example Worksheet', 'Another Worksheet']\n", "snippet": "# Open a new Excel file\nexcel_file = ExcelFile()\n# Add some worksheets\nexcel_file.add_worksheet('My Example Worksheet')\nexcel_file.add_worksheet('Another Worksheet')\n# Get the worksheet names\nexcel_file.get_worksheet_names()\n", "keywords": ["excel", "worksheet names", "worksheet,"], "icon": "las la-file-excel"}]}, {"name": "PowerPoint Application", "icon": "icon: las la-file-powerpoint", "activities": [{"function_call": "__init__(self, visible=True, path=None, add_slide=True)", "name": "Start PowerPoint Application", "description": "For this activity to work, PowerPoint needs to be installed on the system.", "example": ">>> # Start PowerPoint\n>>> powerpoint = PowerPoint()\n", "snippet": "# Start PowerPoint\npowerpoint = PowerPoint()\n", "keywords": ["powerpoint", "ppt"], "icon": "las la-file-powerpoint"}, {"function_call": "save_as(self, path=None)", "name": "Save PowerPoint", "description": "Save PowerPoint Slidedeck", "example": ">>> # Start PowerPoint\n>>> powerpoint = PowerPoint()\n>>> # Add a first slide\n>>> powerpoint.add_slide()\n>>> # Save the PowerPoint presentation\n>>> powerpoint.save()\n", "snippet": "# Start PowerPoint\npowerpoint = PowerPoint()\n# Add a first slide\npowerpoint.add_slide()\n# Save the PowerPoint presentation\npowerpoint.save()\n", "keywords": ["powerpoint", "ppt", "save", "save as", "save powerpoint"], "icon": "las la-file-powerpoint"}, {"function_call": "quit(self)", "name": "Close PowerPoint Application", "description": "Close PowerPoint", "example": ">>> # Start PowerPoint\n>>> powerpoint = PowerPoint()\n>>> # Close PowerPoint\n>>> powerpoint.quit()\n", "snippet": "# Start PowerPoint\npowerpoint = PowerPoint()\n# Close PowerPoint\npowerpoint.quit()\n", "keywords": ["powerpoint", "ppt", "quit", "exit"], "icon": "las la-file-powerpoint"}, {"function_call": "add_slide(self, index=None, type='blank')", "name": "Add PowerPoint Slides", "description": "Adds slides to a presentation", "example": ">>> # Start PowerPoint\n>>> powerpoint = PowerPoint()\n>>> # Add a first slide\n>>> powerpoint.add_slide()\n", "snippet": "# Start PowerPoint\npowerpoint = PowerPoint()\n# Add a first slide\npowerpoint.add_slide()\n", "keywords": ["powerpoint", "ppt", "add", "add slide  powerpoint", "slides"], "icon": "las la-file-powerpoint"}, {"function_call": "number_of_slides(self)", "name": "Slide count", "description": ":return: The number of slides", "example": ">>> # Start PowerPoint\n>>> powerpoint = PowerPoint()\n>>> # Add some slides\n>>> powerpoint.add_slide()\n>>> powerpoint.add_slide()\n>>> # Show number of slides\n>>> powerpoint.number_of_slides()\n", "snippet": "# Start PowerPoint\npowerpoint = PowerPoint()\n# Add some slides\npowerpoint.add_slide()\npowerpoint.add_slide()\n# Show number of slides\npowerpoint.number_of_slides()\n", "keywords": ["powerpoint", "ppt", "slide count", "number of slides"], "icon": "las la-file-powerpoint"}, {"function_call": "add_text(self, text, index=None, font_size=48, font_name=None, bold=False, margin_bottom=100, margin_left=100, margin_right=100, margin_top=100)", "name": "Text to slide", "description": "Add text to a slide", "example": ">>> # Start PowerPoint\n>>> powerpoint = PowerPoint()\n>>> # Add slide with text\n>>> powerpoint.add_text(text='Sample Text')\n", "snippet": "# Start PowerPoint\npowerpoint = PowerPoint()\n# Add slide with text\npowerpoint.add_text(text='Sample Text')\n", "keywords": ["powerpoint", "ppt", "text", "add text", "slides"], "icon": "las la-file-powerpoint"}, {"function_call": "delete_slide(self, index=None)", "name": "Delete slide", "description": ":parameter index: Slide index to be deleted. If none is specified, last slide will be deleted", "example": ">>> # Start PowerPoint\n>>> powerpoint = PowerPoint()\n>>> # Add some slides\n>>> powerpoint.add_slide()\n>>> powerpoint.add_slide()\n>>> # Delete last slide\n>>> powerpoint.delete_slide()\n", "snippet": "# Start PowerPoint\npowerpoint = PowerPoint()\n# Add some slides\npowerpoint.add_slide()\npowerpoint.add_slide()\n# Delete last slide\npowerpoint.delete_slide()\n", "keywords": ["powerpoint", "ppt", "delete", "delete slide"], "icon": "las la-file-powerpoint"}, {"function_call": "replace_text(self, placeholder_text, replacement_text)", "name": "Replace all occurences of text in PowerPoint slides", "description": "Can be used for example to replace arbitrary placeholder value in a PowerPoint.For example when using a template slidedeck, using 'XXXX' as a placeholder.Take note that all strings are case sensitive.", "example": ">>> # Start PowerPoint\n>>> powerpoint = PowerPoint()\n>>> # Add some slides with text\n>>> powerpoint.add_text(text='Hello, my name is placeholder')\n>>> # Change 'placeholder' to the word 'robot\n>>> powerpoint.replace_text(placeholder_text = 'placeholder', replacement_text ='robot')\n", "snippet": "# Start PowerPoint\npowerpoint = PowerPoint()\n# Add some slides with text\npowerpoint.add_text(text='Hello, my name is placeholder')\n# Change 'placeholder' to the word 'robot\npowerpoint.replace_text(placeholder_text = 'placeholder', replacement_text ='robot')\n", "keywords": ["powerpoint", "ppt", "replace", "placeholder"], "icon": "las la-file-powerpoint"}, {"function_call": "export_to_pdf(self, path=None)", "name": "PowerPoint to PDF", "description": "Export PowerPoint presentation to PDF file", "example": ">>> # Start PowerPoint\n>>> powerpoint = PowerPoint()\n>>> # Add some slides with text\n>>> powerpoint.add_text(text='Robots are cool')\n>>> # Export to pdf\n>>> powerpoint.export_to_pdf()\n", "snippet": "# Start PowerPoint\npowerpoint = PowerPoint()\n# Add some slides with text\npowerpoint.add_text(text='Robots are cool')\n# Export to pdf\npowerpoint.export_to_pdf()\n", "keywords": ["powerpoint", "ppt", "export", "pdf"], "icon": "las la-file-powerpoint"}, {"function_call": "export_slides_to_images(self, path=None, type='png')", "name": "Slides to images", "description": "Export PowerPoint slides to seperate image files", "example": ">>> # Start PowerPoint\n>>> powerpoint = PowerPoint()\n>>> # Add some slides with text\n>>> powerpoint.add_text(text='Robots are cool')\n>>> powerpoint.add_text(text='Humans are cooler')\n>>> # Export slides to images\n>>> powerpoint.export_slides_to_images()\n", "snippet": "# Start PowerPoint\npowerpoint = PowerPoint()\n# Add some slides with text\npowerpoint.add_text(text='Robots are cool')\npowerpoint.add_text(text='Humans are cooler')\n# Export slides to images\npowerpoint.export_slides_to_images()\n", "keywords": ["powerpoint", "ppt", "export", "png", "image", "slides to image"], "icon": "las la-file-powerpoint"}]}, {"name": "Office 365", "icon": "las la-cloud", "activities": [{"function_call": "send_email_with_outlook365(client_id, client_secret, to_email, subject='', body='')", "name": "Send email Office Outlook 365", "description": ":parameter client_id: Client id for office 365 account:parameter client_secret: Client secret for office 365 account:parameter to_email: E-mail to send to:parameter subject: Optional subject:parameter body: Optional body of the email", "example": ">>> # Send email to 'robot@automagica.com'\n>>> send_email_with_outlook365('SampleClientID', 'SampleClientSecret', 'robot@automagica.com')\n", "snippet": "# Send email to 'robot@automagica.com'\nsend_email_with_outlook365('SampleClientID', 'SampleClientSecret', 'robot@automagica.com')\n", "keywords": ["mail", "office 365", "outlook", "email", "e-mail"], "icon": "las la-envelope"}]}, {"name": "Salesforce", "icon": "lab la-salesforce", "activities": [{"function_call": "salesforce_api_call(action, key, parameters={}, method='get', data={})", "name": "Salesforce API", "description": "Activity to make calls to Salesforce REST API.", "example": ">>> spf_api_call('action', 'key', 'parameters')\nResponse\n", "snippet": "spf_api_call('action', 'key', 'parameters')\n", "keywords": ["salesforce"], "icon": "lab la-salesforce"}]}, {"name": "E-mail (SMTP)", "icon": "las la-at", "activities": [{"function_call": "send_mail_smtp(smtp_host, smtp_user, smtp_password, to_address, subject=\"\", message=\"\", port=587)", "name": "Mail with SMTP", "description": "This function lets you send emails with an e-mail address.", "example": ">>> send_mail_smpt('robot@automagica.com', 'SampleUser', 'SamplePassword', 'robotfriend@automagica.com')\n", "snippet": "send_mail_smpt('robot@automagica.com', 'SampleUser', 'SamplePassword', 'robotfriend@automagica.com')\n", "keywords": ["mail", "e-mail", "email smpt"], "icon": "las la-mail-bulk"}]}, {"name": "Windows OS", "icon": "icon: lab la-windows", "activities": [{"function_call": "set_user_password(username, password)", "name": "Set Windows password", "description": "Sets the password for a Windows user.", "example": ">>> set_user_password('SampleUsername', 'SamplePassword')\n", "snippet": "set_user_password('SampleUsername', 'SamplePassword')\n", "keywords": ["windows", "user", "password", "account"], "icon": "las la-passport"}, {"function_call": "validate_user_password(username, password)", "name": "Check Windows password", "description": "Validates a Windows user password if it is correct", "example": ">>> validate_user_password('SampleUsername', 'SamplePassword')\nFalse\n", "snippet": "validate_user_password('SampleUsername', 'SamplePassword')\n", "keywords": ["windows", "user", "password", "account"], "icon": "las la-passport"}, {"function_call": "lock_windows()", "name": "Lock Windows", "description": "Locks Windows requiring login to continue.", "example": ">>> lock_windows()\n", "snippet": "lock_windows()\n", "keywords": ["windows", "user", "password", "account", "lock", "freeze", "hibernate", "sleep", "lockescreen"], "icon": "las la-user-lock"}, {"function_call": "is_logged_in()", "name": "Check if Windows logged in", "description": "Checks if the current user is logged in and not on the lockscreen. Most automations do not work properly when the desktop is locked.", "example": ">>> is_logged_in()\nTrue\n", "snippet": "is_logged_in()\n", "keywords": ["windows", "login", "logged in", "lockscreen", "user", "password", "account", "lock", "freeze", "hibernate", "sleep"], "icon": "lar la-user"}, {"function_call": "is_desktop_locked()", "name": "Check if Windows is locked", "description": "Checks if the current user is locked out and on the lockscreen. Most automations do not work properly when the desktop is locked.", "example": ">>> desktop_locked()\nTrue\n", "snippet": "desktop_locked()\n", "keywords": ["windows", "login", "logged in", "lockscreen", "user", "password", "account", "lock", "locked", "freeze", "hibernate", "sleep"], "icon": "las la-user"}, {"function_call": "get_username()", "name": "Get Windows username", "description": "Get current logged in user's username", "example": ">>> get_username()\n'Automagica'\n", "snippet": "get_username()\n", "keywords": ["windows", "login", "logged in", "lockscreen", "user", "password", "account", "lock", "locked", "freeze", "hibernate", "sleep"], "icon": "las la-user"}, {"function_call": "set_to_clipboard(text)", "name": "Set clipboard", "description": "Set any text to the Windows clipboard.", "example": ">>> # Create some sample text\n>>> sample_text = 'A robots favourite food must be computer chips'\n>>> # Set to clipboard\n>>> set_to_clipboard(sample_text)\n>>> # Print the clipboard to verify\n>>> print( get_from_clipboard() )\n", "snippet": "# Create some sample text\nsample_text = 'A robots favourite food must be computer chips'\n# Set to clipboard\nset_to_clipboard(sample_text)\n# Print the clipboard to verify\nprint( get_from_clipboard() )\n", "keywords": ["copy", "clipboard", "clip board", "ctrl c", "ctrl v", "paste"], "icon": "las la-clipboard-check"}, {"function_call": "get_from_clipboard()", "name": "Get clipboard", "description": "Get the text currently in the Windows clipboard", "example": ">>> # Create some sample text\n>>> sample_text = 'A robots favourite food must be computer chips'\n>>> # Set to clipboard\n>>> set_to_clipboard(sample_text)\n>>> # Get the clipboard to verify\n>>> get_from_clipboard()\n'A robots favourite food must be computer chips'\n", "snippet": "# Create some sample text\nsample_text = 'A robots favourite food must be computer chips'\n# Set to clipboard\nset_to_clipboard(sample_text)\n# Get the clipboard to verify\nget_from_clipboard()\n", "keywords": ["copy", "clipboard", "clip board", "ctrl c", "ctrl v", "paste"], "icon": "las la-clipboard-list"}, {"function_call": "clear_clipboard()", "name": "Empty clipboard", "description": "Empty text from clipboard. Getting clipboard data after this should return in None", "example": ">>> # Create some sample text\n>>> sample_text = 'A robots favourite food must be computer chips'\n>>> # Set to clipboard\n>>> set_to_clipboard(sample_text)\n>>> # Clear the clipboard\n>>> clear_clipboard()\n>>> # Get clipboard contents to verify\n>>> print( get_clipboard() )\nNone\n", "snippet": "# Create some sample text\nsample_text = 'A robots favourite food must be computer chips'\n# Set to clipboard\nset_to_clipboard(sample_text)\n# Clear the clipboard\nclear_clipboard()\n# Get clipboard contents to verify\nprint( get_clipboard() )\n", "keywords": ["copy", "clipboard", "clip board", "ctrl c", "ctrl v", "paste"], "icon": "las la-clipboard"}, {"function_call": "run_vbs_script(script_path, parameters=[])", "name": "Run VBSscript", "description": "Run a VBScript file", "example": ">>> # Run a VBS script\n>>> run_vbs_script('Samplescript.vbs')\n", "snippet": "# Run a VBS script\nrun_vbs_script('Samplescript.vbs')\n", "keywords": ["vbs", "VBScript"], "icon": "las la-cogs"}, {"function_call": "beep(frequency=1000, duration=500)", "name": "Beep", "description": "Make a beeping sound. Make sure your volume is up and you have hardware connected.", "example": ">>> beep()\n", "snippet": "beep()\n", "keywords": ["beep", "sound", "noise", "speaker", "alert"], "icon": "las la-volume-up"}]}, {"name": "Text-to-Speech", "icon": "las la-volume-up", "activities": [{"function_call": "speak(text, speed=None)", "name": "Speak", "description": "Use the Text-To-Speech engine available on your system to read text", "example": ">>> # Read the following text out loud\n>>> speak('How do robots eat guacamole?')\n>>> speak('With microchips!')\n", "snippet": "# Read the following text out loud\nspeak('How do robots eat guacamole?')\nspeak('With microchips!')\n", "keywords": ["sound", "speech", "text", "speech to text", "speech-to-text", "translate", "read", "read out loud"], "icon": "las la-microphone-alt"}]}, {"name": "Active Directory", "icon": "las la-user", "activities": [{"function_call": "__init__(self, ldap_server=None, username=None, password=None)", "name": "AD interface", "description": "Interface to Windows Active Directory through ADSI", "example": ">>> ad = ActiveDirectory()\n", "snippet": "ad = ActiveDirectory()\n", "keywords": ["AD", "active directory", "activedirectory"], "icon": "las la-audio-description"}, {"function_call": "get_object_by_distinguished_name(self, distinguished_name)", "name": "Get AD object by name", "description": "Interface to Windows Active Directory through ADSI", "example": ">>> ad = ActiveDirectory()\n>>> ad.get_object_by_distinguished_name('SampleDN')\n", "snippet": "ad = ActiveDirectory()\nad.get_object_by_distinguished_name('SampleDN')\n", "keywords": ["AD", "active directory", "activedirectory"], "icon": "las la-audio-description"}]}, {"name": "Utilities", "icon": "icon: las la-toolbox", "activities": [{"function_call": "home_path(subdir=None)", "name": "Get user home path", "description": "Returns the current user's home path", "example": ">>> # Home_path without arguments will return the home path\n>>> print( home_path() )\n>>> # When looking for a file in the home path, we can specify it\n>>> # First make a sample textfile\n>>> make_textfile()\n>>> # Refer to it\n>>> home_path('generated_textfile.txt')\n'C:\\\\Users\\\\<username>\\\\generated_textfile.txt'\n", "snippet": "# Home_path without arguments will return the home path\nprint( home_path() )\n# When looking for a file in the home path, we can specify it\n# First make a sample textfile\nmake_textfile()\n# Refer to it\nhome_path('generated_textfile.txt')\n", "keywords": ["home", "home path", "homepath", "home directory", "homedir"], "icon": "las la-home"}, {"function_call": "desktop_path(subdir=None)", "name": "Get desktop path", "description": "Returns the current user's desktop path", "example": ">>> # Desktop_path without arguments will return the home path\n>>> print( desktop_path() )\n>>> # When looking for a file on the desktop, we can specify it\n>>> # First make a sample textfile\n>>> make_textfile()\n>>> # Refer to it\n>>> desktop_path('generated_textfile.txt')\n'C:\\\\Users\\\\<username>\\\\Desktop\\\\generated_textfile.txt'\n", "snippet": "# Desktop_path without arguments will return the home path\nprint( desktop_path() )\n# When looking for a file on the desktop, we can specify it\n# First make a sample textfile\nmake_textfile()\n# Refer to it\ndesktop_path('generated_textfile.txt')\n", "keywords": ["desktop", "desktop path", "desktoppath", "desktop directory", "desktopdir"], "icon": "lar la-desktop"}, {"function_call": "open_file(path)", "name": "Open file", "description": "Opens file with default programs", "example": ">>> # Make textfile\n>>> testfile = make_textfile()\n>>> # Open the file\n>>> open_file(testfile)\n", "snippet": "# Make textfile\ntestfile = make_textfile()\n# Open the file\nopen_file(testfile)\n", "keywords": ["file", "open", "open file", "show", "reveal", "explorer", "run", "start"], "icon": "lar la-file"}, {"function_call": "set_wallpaper(image_path)", "name": "Set wallpaper", "description": "Set Windows desktop wallpaper with the the specified image", "example": ">>> # Caution: this example will change your wallpaper\n>>> # Take a screenshot of current screen\n>>> screenshot = take_screenshot()\n>>> # Flip it hozirontally for fun\n>>> mirror_image_horizontally(screenshot)\n>>> # Set flipped image as wallpaper\n>>> set_wallpaper(screenshot)\n", "snippet": "# Caution: this example will change your wallpaper\n# Take a screenshot of current screen\nscreenshot = take_screenshot()\n# Flip it hozirontally for fun\nmirror_image_horizontally(screenshot)\n# Set flipped image as wallpaper\nset_wallpaper(screenshot)\n", "keywords": ["desktop", "desktop path", "desktoppath", "desktop directory", "desktopdir"], "icon": "las la-desktop"}, {"function_call": "download_file_from_url(url, filename=None, path=None)", "name": "Download file from a URL", "description": ":parameter url: Source URL to download file from:parameter filename::parameter path: Target path. If no path is given will download to the home directory", "example": ">>> # Download robot picture from the wikipedia robot page\n>>> picture_url = 'https://upload.wikimedia.org/wikipedia/commons/thumb/6/6c/Atlas_from_boston_dynamics.jpg/220px-Atlas_from_boston_dynamics.jpg'\n>>> download_file_from_url(url = picture_url, filename = 'robot.jpg')\n'C:\\\\Users\\\\<username>\\\\robot.jpg'\n", "snippet": "# Download robot picture from the wikipedia robot page\npicture_url = 'https://upload.wikimedia.org/wikipedia/commons/thumb/6/6c/Atlas_from_boston_dynamics.jpg/220px-Atlas_from_boston_dynamics.jpg'\ndownload_file_from_url(url = picture_url, filename = 'robot.jpg')\n", "keywords": ["download", "download url", "save", "request"], "icon": "las la-cloud-download-alt"}]}, {"name": "Trello", "icon": "lab la-trello", "activities": [{"function_call": "add_trello_card(title=\"My card\", description=\"My description\", board_name=\"My board\", list_name=\"My list\", api_key=\"\", api_secret=\"\", token=\"\", token_secret=\"any\")", "name": "Add Trello Card", "description": "Add a card to the Trello board. For this you need a Trello API key, secret and token.", "example": ">>> add_trello_card(title='ExampleTitle', description='ExampleDescription', api_key='SampleKey', api_secret='ApiSecret', token='SampleToken')\n", "snippet": "add_trello_card(title='ExampleTitle', description='ExampleDescription', api_key='SampleKey', api_secret='ApiSecret', token='SampleToken')\n", "keywords": ["trello"], "icon": "lab la-trello"}]}, {"name": "System", "icon": "las la-laptop", "activities": [{"function_call": "rename_file(input_path, new_name=None)", "name": "Rename a file", "description": "This activity will rename a file. If the the desired name already exists in the folder file will not be renamed.", "example": ">>> # Make new textfile in home directory\n>>> textfile = make_textfile()\n>>> # Rename the file\n>>> rename_file(textfile)\nC:\\\\Users\\\\<username>\\\\generated_textfile_renamed.txt'\n", "snippet": "# Make new textfile in home directory\ntextfile = make_textfile()\n# Rename the file\nrename_file(textfile)\n", "keywords": ["file", "rename", "rename file", "organise file", "files", "file manipulation", "explorer", "nautilus"], "icon": "las la-file-contract"}, {"function_call": "move_file(from_path, to_path)", "name": "Move a file", "description": "If the new location already contains a file with the same name, a random 4 character uid will be added in front of the name before the file is moved.", "example": ">>> # Make new textfile in home directory\n>>> textfile = make_textfile()\n>>> # Make a folder to move the file to\n>>> new_folder = create_folder()\n>>> # Move textfile to the folder\n>>> move_file(textfile, new_folder)\n", "snippet": "# Make new textfile in home directory\ntextfile = make_textfile()\n# Make a folder to move the file to\nnew_folder = create_folder()\n# Move textfile to the folder\nmove_file(textfile, new_folder)\n", "keywords": ["file", "move", "move file", "organise file", "files", "file manipulation", "explorer", "nautilus"], "icon": "las la-file-export"}, {"function_call": "remove_file(path)", "name": "Remove a file", "description": ":parameter path: Full path to the file that will be deleted.", "example": ">>> # Make new textfile in home directory\n>>> textfile = make_textfile()\n>>> # Remove the file\n>>> remove_file(textfile)\n", "snippet": "# Make new textfile in home directory\ntextfile = make_textfile()\n# Remove the file\nremove_file(textfile)\n", "keywords": ["file", "delete", "erase", "delete file", "organise file", "files", "file manipulation", "explorer", "nautilus"], "icon": "las la-trash"}, {"function_call": "file_exists(path)", "name": "Check if file exists", "description": "This function checks whether the file with the given path exists.", "example": ">>> # Make new textfile in home directory\n>>> textfile = make_textfile()\n>>> # Check if file exists\n>>> file_exists(textfile)\nTrue\n", "snippet": "# Make new textfile in home directory\ntextfile = make_textfile()\n# Check if file exists\nfile_exists(textfile)\n", "keywords": ["file", "exists", "files", "file manipulation", "explorer", "nautilus"], "icon": "las la-tasks"}, {"function_call": "wait_file_exists(path, timeout=60)", "name": "Wait until a file exists.", "description": "Not that this activity is blocking and will keep the system waiting.", "example": ">>> # Make new textfile in home directory\n>>> textfile = make_textfile()\n>>> # Wait untile file exists # Should pass immediatly\n>>> wait_file_exists(textfile)\n", "snippet": "# Make new textfile in home directory\ntextfile = make_textfile()\n# Wait untile file exists # Should pass immediatly\nwait_file_exists(textfile)\n", "keywords": ["file", "wait", "wait till exists", "files", "file manipulation", "explorer", "nautilus"], "icon": "las la-list-alt"}, {"function_call": "write_list_to_file(list_to_write, file_path)", "name": "List to .txt", "description": "Writes a list to a  text (.txt) file.Every element of the entered list is written on a new line of the text file.", "example": ">>> # Make a list to write\n>>> robot_names = ['WALL-E', 'Terminator', 'R2D2']\n>>> # Create a new text file\n>>> textfile = make_textfile()\n>>> write_list_to_file(robot_names, textfile)\n>>> # Open the file for illustration\n>>> open_file(textfile)\n", "snippet": "# Make a list to write\nrobot_names = ['WALL-E', 'Terminator', 'R2D2']\n# Create a new text file\ntextfile = make_textfile()\nwrite_list_to_file(robot_names, textfile)\n# Open the file for illustration\nopen_file(textfile)\n", "keywords": ["list", "text", "txt", "list to file", "write list", "write"], "icon": "las la-list"}, {"function_call": "read_list_from_txt(file_path)", "name": "Read .txt file", "description": "This activity writes the content of a .txt file to a list and returns that list.Every new line from the .txt file becomes a new element of the list. The activity willnot work if the entered path is not attached to a .txt file.", "example": ">>> # Make a list to write\n>>> robot_names = ['WALL-E', 'Terminator', 'R2D2']\n>>> # Create a new text file\n>>> textfile = make_textfile()\n>>> write_list_to_file(robot_names, textfile)\n>>> # Read list from file\n>>> read_list_from_txt(textfile)\n['WALL-E', 'Terminator', 'R2D2']\n", "snippet": "# Make a list to write\nrobot_names = ['WALL-E', 'Terminator', 'R2D2']\n# Create a new text file\ntextfile = make_textfile()\nwrite_list_to_file(robot_names, textfile)\n# Read list from file\nread_list_from_txt(textfile)\n", "keywords": ["list", "text", "txt", "list to file", "write list", "read", "read txt", "read text"], "icon": "las la-th-list"}, {"function_call": "append_line(text, file_path)", "name": "Append to .txt", "description": "Append a text line to a file and creates the file if it does not exist yet.", "example": ">>> # Create a new text file\n>>> textfile = make_textfile()\n>>> # Append a few lines to the file\n>>> append_line('Line 1', textfile)\n>>> append_line('Line 2', textfile)\n>>> append_line('Line 3', textfile)\n>>> # Open the file for illustration\n>>> open_file(textfile)\n", "snippet": "# Create a new text file\ntextfile = make_textfile()\n# Append a few lines to the file\nappend_line('Line 1', textfile)\nappend_line('Line 2', textfile)\nappend_line('Line 3', textfile)\n# Open the file for illustration\nopen_file(textfile)\n", "keywords": ["list", "text", "txt", "list to file", "write list", "read", "write txt", "append text", "append line", "append", "add to file", "add"], "icon": "las la-tasks"}, {"function_call": "make_textfile(text='Sample text', output_path=None)", "name": "Make text file", "description": "Initialize text file", "example": ">>> # Create a new text file\n>>> textfile = make_textfile()\nC:\\\\Users\\\\<username>\\\\generated_textfile.txt'\n", "snippet": "# Create a new text file\ntextfile = make_textfile()\n", "keywords": ["make textfile", "textfile", "testfile", "exampel file", "make file", "make", "new file", "new textfile", "txt", "new txt"], "icon": "las la-file-alt"}, {"function_call": "copy_file(old_path, new_path=None)", "name": "Copy a file", "description": "Copies a file from one place to another.If the new location already contains a file with the same name, a random 4 character uid is added to the name.", "example": ">>> # Create a new text file\n>>> textfile = make_textfile()\n>>> # Copy the textfile\n>>> copy_file(textfile)\nC:\\\\Users\\\\<username>\\\\generated_textfile.txt'\n", "snippet": "# Create a new text file\ntextfile = make_textfile()\n# Copy the textfile\ncopy_file(textfile)\n", "keywords": ["make textfile", "textfile", "testfile", "exampel file", "make file", "make", "new file", "new textfile", "txt", "new txt"], "icon": "las la-copy"}, {"function_call": "get_file_extension(path)", "name": "Get file extension", "description": "Get extension of a file", "example": ">>> # Create a new text file\n>>> textfile = make_textfile()\n>>> # Get file extension of this textfile\n>>> get_file_extension(textfile)\n'.txt'\n", "snippet": "# Create a new text file\ntextfile = make_textfile()\n# Get file extension of this textfile\nget_file_extension(textfile)\n", "keywords": ["file", "extension", "file extension", "details"], "icon": "las la-info"}, {"function_call": "send_to_printer(file)", "name": "Print", "description": "Send file to default printer to priner. This activity sends a file to the printer. Make sure to have a default printer set up.", "example": ">>> # Caution as this example could result in a print from default printer\n>>> # Create a new text file\n>>> textfile = make_textfile(text = 'What does a robot do at lunch? Take a megabyte!')\n>>> # Print the textfile\n>>> send_to_printer(textfile)\n", "snippet": "# Caution as this example could result in a print from default printer\n# Create a new text file\ntextfile = make_textfile(text = 'What does a robot do at lunch? Take a megabyte!')\n# Print the textfile\nsend_to_printer(textfile)\n", "keywords": ["print", "printer", "printing", "ink", "export"], "icon": "las la-print"}]}, {"name": "PDF", "icon": "las la-file-pdf", "activities": [{"function_call": "read_text_from_pdf(file_path)", "name": "Text from PDF", "description": "Extracts the text from a PDF. This activity reads text from a pdf file. Can only read PDF files that contain a text layer.", "example": ">>> # Caution, for this example to work a .pdf example file will be downloaded from automagica.com FTP\n>>> example_pdf = download_file_from_url('http://automagica.com/examples/example_document.pdf')\n>>> # Open example pdf for illustration\n>>> open_file(example_pdf)\n>>> # Read the text\n>>> read_text_from_pdf(example_pdf)\n", "snippet": "# Caution, for this example to work a .pdf example file will be downloaded from automagica.com FTP\nexample_pdf = download_file_from_url('http://automagica.com/examples/example_document.pdf')\n# Open example pdf for illustration\nopen_file(example_pdf)\n# Read the text\nread_text_from_pdf(example_pdf)\n", "keywords": ["PDF", "read", "text", "extract text", "PDF file"], "icon": "las la-glasses"}, {"function_call": "join_pdf_files(file_paths, output_path=None)", "name": "Merge PDF", "description": "Merges multiple PDFs into a single file", "example": ">>> # Caution, for this example to work a .pdf example file will be downloaded from automagica.com FTP\n>>> example_pdf = download_file_from_url('http://automagica.com/examples/example_document.pdf')\n>>> # Join the PDF file three times with itself for illustration, could also be different files\n>>> merged_pdf = join_pdf_files([example_pdf, example_pdf, example_pdf])\n>>> # Open resulting PDF file for illustration\n>>> open_file(merged_pdf)\n", "snippet": "# Caution, for this example to work a .pdf example file will be downloaded from automagica.com FTP\nexample_pdf = download_file_from_url('http://automagica.com/examples/example_document.pdf')\n# Join the PDF file three times with itself for illustration, could also be different files\nmerged_pdf = join_pdf_files([example_pdf, example_pdf, example_pdf])\n# Open resulting PDF file for illustration\nopen_file(merged_pdf)\n", "keywords": ["PDF", "read", "text", "extract text", "PDF file", "join PDF", "join", "merge", "merge PDF"], "icon": "las la-object-ungroup"}, {"function_call": "extract_page_range_from_pdf(file_path, start_page, end_page, output_path=None)", "name": "Extract page from PDF", "description": "Extracts a particular range of a PDF to a separate file.", "example": ">>> # Caution, for this example to work a .pdf example file will be downloaded from automagica.com FTP\n>>> example_pdf = download_file_from_url('http://automagica.com/examples/example_document.pdf')\n>>> # Join the PDF file three times to create multi page\n>>> multi_page_pdf_example = join_pdf_files([example_pdf, example_pdf, example_pdf])\n>>> # Extract some pages from it\n>>> new_file = extract_page_range_from_pdf(multi_page_pdf_example, 1, 2 )\n>>> # Open resulting PDF file for illustration\n>>> open_file(new_file)\n", "snippet": "# Caution, for this example to work a .pdf example file will be downloaded from automagica.com FTP\nexample_pdf = download_file_from_url('http://automagica.com/examples/example_document.pdf')\n# Join the PDF file three times to create multi page\nmulti_page_pdf_example = join_pdf_files([example_pdf, example_pdf, example_pdf])\n# Extract some pages from it\nnew_file = extract_page_range_from_pdf(multi_page_pdf_example, 1, 2 )\n# Open resulting PDF file for illustration\nopen_file(new_file)\n", "keywords": ["PDF", "read", "extract text", "PDF file", "extract PDF", "join", "cut", "cut PDF", "extract pages", "extract from pdf", "select page", "page"], "icon": "las la-cut"}, {"function_call": "extract_images_from_pdf(file_path)", "name": "Extract images from PDF", "description": "Save a specific page from a PDF as an image", "example": ">>> # Caution, for this example to work a .pdf example file will be downloaded from automagica.com FTP\n>>> example_pdf = download_file_from_url('http://automagica.com/examples/example_document.pdf')\n>>> # Extract the images\n>>> extract_images_from_pdf(example_pdf)\n", "snippet": "# Caution, for this example to work a .pdf example file will be downloaded from automagica.com FTP\nexample_pdf = download_file_from_url('http://automagica.com/examples/example_document.pdf')\n# Extract the images\nextract_images_from_pdf(example_pdf)\n", "keywords": ["PDF", "extract images", "images", "extract text", "PDF file", "image"], "icon": "las la-icons"}, {"function_call": "apply_watermark_to_pdf(file_path, watermark_path, output_path='')", "name": "Watermark a PDF", "description": ":parameter file_path: Filepath to the document that will be watermarked. Should be pdf file.:parameter watermark_path: Filepath to the watermark. Should be pdf file.:parameter output_path: Path to save watermarked PDF. If no path is provided same path as input will be used with 'watermarked' added to the name", "example": ">>> # Caution, for this example to work a .pdf example file will be downloaded from automagica.com FTP\n>>> example_pdf = download_file_from_url('http://automagica.com/examples/example_document.pdf')\n>>> # Download the watermark\n>>> example_watermark = download_file_from_url('http://automagica.com/examples/approved_stamp.pdf')\n>>> # Apply the watermark\n>>> watermarked_file = apply_watermark_to_pdf(example_pdf, example_watermark)\n>>> # Open the file for illustration\n>>> open_file(watermarked_file)\n", "snippet": "# Caution, for this example to work a .pdf example file will be downloaded from automagica.com FTP\nexample_pdf = download_file_from_url('http://automagica.com/examples/example_document.pdf')\n# Download the watermark\nexample_watermark = download_file_from_url('http://automagica.com/examples/approved_stamp.pdf')\n# Apply the watermark\nwatermarked_file = apply_watermark_to_pdf(example_pdf, example_watermark)\n# Open the file for illustration\nopen_file(watermarked_file)\n", "keywords": ["PDF", "extract images", "images", "extract text", "PDF file", "image"], "icon": "las la-stamp"}]}, {"name": "System Monitoring", "icon": "las la-wave-square", "activities": [{"function_call": "get_cpu_load(measure_time=1)", "name": "CPU load", "description": "Get average CPU load for all cores.", "example": ">>> get_cpu_load()\n10.1\n", "snippet": "get_cpu_load()\n", "keywords": ["cpu", "load", "cpuload"], "icon": "las la-microchip"}, {"function_call": "get_number_of_cpu(logical=True)", "name": "Count CPU", "description": "Get the number of CPU's in the current system.", "example": ">>> get_number_of_cpu()\n2\n", "snippet": "get_number_of_cpu()\n", "keywords": ["cpu", "count", "number of cpu"], "icon": "las la-calculator"}, {"function_call": "get_cpu_frequency()", "name": "CPU frequency", "description": "Get frequency at which CPU currently operates.", "example": ">>> get_cpu_frequency()\nscpufreq(current=3600.0, min=0.0, max=3600.0)\n", "snippet": "get_cpu_frequency()\n", "keywords": ["cpu", "load", "cpu frequency"], "icon": "las la-wave-square"}, {"function_call": "get_cpu_stats()", "name": "CPU Stats", "description": "Get CPU statistics", "example": ">>> get_cpu_stats()\nscpustats(ctx_switches=735743826, interrupts=1540483897, soft_interrupts=0, syscalls=2060595131)\n", "snippet": "get_cpu_stats()\n", "keywords": ["cpu", "load", "cpu frequency", "stats", "cpu statistics"], "icon": "las la-server"}, {"function_call": "get_memory_stats(mem_type=\"swap\")", "name": "Memory statistics", "description": "Get  memory statistics", "example": ">>> get_memory_stats()\nsswap(total=24640016384, used=18120818688, free=6519197696, percent=73.5, sin=0, sout=0)\n", "snippet": "get_memory_stats()\n", "keywords": ["memory", "statistics", "usage", "ram"], "icon": "las la-memory"}, {"function_call": "get_disk_stats()", "name": "Disk stats", "description": "Get disk statistics of main disk", "example": ">>> get_disk_stats()\nsdiskusage(total=999559262208, used=748696350720, free=250862911488, percent=74.9)\n", "snippet": "get_disk_stats()\n", "keywords": ["disk usage", "disk stats", "disk", "harddisk", "space"], "icon": "las la-save"}, {"function_call": "get_disk_partitions()", "name": "Partition info", "description": "Get disk partition info", "example": ">>> get_disk_paritions()\n[sdiskpart(device='C:\\\\', mountpoint='C:\\\\', fstype='NTFS', opts='rw,fixed')]\n", "snippet": "get_disk_paritions()\n", "keywords": ["disk usage", "disk stats", "disk", "harddisk", "space"], "icon": "las la-save"}, {"function_call": "get_boot_time()", "name": "Boot time", "description": "Get most recent boot time", "example": ">>> get_boot_time()\n123456789.0\n", "snippet": "get_boot_time()\n", "keywords": ["boot", "boot time", "boottime", "startup", "timer"], "icon": "lar la-clock"}, {"function_call": "get_time_since_last_boot()", "name": "Uptime", "description": "Get uptime since last boot", "example": ">>> get_time_since_last_boot()\n1337.0\n", "snippet": "get_time_since_last_boot()\n", "keywords": ["boot", "boot time", "boottime", "startup", "timer"], "icon": "lar la-clock"}]}, {"name": "Image Processing", "icon": "las la-photo-video", "activities": [{"function_call": "show_image(path)", "name": "Show image", "description": "Displays an image specified by the path variable on the default imaging program.", "example": ">>> # Take screenshot of current screen to use as test image\n>>> testimage = take_screenshot()\n>>> # Show the image\n>>> show_image(testimage)\n", "snippet": "# Take screenshot of current screen to use as test image\ntestimage = take_screenshot()\n# Show the image\nshow_image(testimage)\n", "keywords": ["image", "show image", "reveal", "open image", "open"], "icon": "las la-images"}, {"function_call": "rotate_image(path, angle=90)", "name": "Rotate image", "description": "Rotate an image", "example": ">>> # Take screenshot of current screen to use as test image\n>>> testimage = take_screenshot()\n>>> # Rotate the image\n>>> rotate_image(testimage)\n>>> # Show the image\n>>> show_image(testimage)\n", "snippet": "# Take screenshot of current screen to use as test image\ntestimage = take_screenshot()\n# Rotate the image\nrotate_image(testimage)\n# Show the image\nshow_image(testimage)\n", "keywords": ["image", "rotate image", "90 degrees", "image manipulation", "photoshop", "paint"], "icon": "las la-undo"}, {"function_call": "resize_image(path, size)", "name": "Resize image", "description": "Resizes the image specified by the path variable.", "example": ">>> # Take screenshot of current screen to use as test image\n>>> testimage = take_screenshot()\n>>> # Resize the image\n>>> resize_image(testimage, size=(100,100))\n>>> # Show the image\n>>> show_image(testimage)\n", "snippet": "# Take screenshot of current screen to use as test image\ntestimage = take_screenshot()\n# Resize the image\nresize_image(testimage, size=(100,100))\n# Show the image\nshow_image(testimage)\n", "keywords": ["image", "resize image", "resize", "size", "image manipulation", "photoshop", "paint"], "icon": "las la-expand-arrows-alt"}, {"function_call": "get_image_width(path)", "name": "Get image width", "description": "Get with of image", "example": ">>> # Take screenshot of current screen to use as test image\n>>> testimage = take_screenshot()\n>>> # get image height\n>>> get_image_width(testimage)\n1000\n", "snippet": "# Take screenshot of current screen to use as test image\ntestimage = take_screenshot()\n# get image height\nget_image_width(testimage)\n", "keywords": ["image", "height", "width", "image height", "image width"], "icon": "las la-expand-arrows-alt"}, {"function_call": "get_image_height(path)", "name": "Get image height", "description": "Get height of image", "example": ">>> # Take screenshot of current screen to use as test image\n>>> testimage = take_screenshot()\n>>> # get image height\n>>> get_image_height(testimage)\n1000\n", "snippet": "# Take screenshot of current screen to use as test image\ntestimage = take_screenshot()\n# get image height\nget_image_height(testimage)\n", "keywords": ["image", "height", "width", "image height", "image width"], "icon": "las la-arrows-alt-v"}, {"function_call": "crop_image(path, box=None)", "name": "Crop image", "description": "Crops the image specified by path to a region determined by the box variable.", "example": ">>> # Take screenshot of current screen to use as test image\n>>> testimage = take_screenshot()\n>>> # Crop the image\n>>> crop_image(testimage, box = (10,10,100,100))\n>>> # Show the image\n>>> show_image(testimage)\n", "snippet": "# Take screenshot of current screen to use as test image\ntestimage = take_screenshot()\n# Crop the image\ncrop_image(testimage, box = (10,10,100,100))\n# Show the image\nshow_image(testimage)\n", "keywords": ["image", "crop", "crop image"], "icon": "las la-crop"}, {"function_call": "mirror_image_horizontally(path)", "name": "Mirror image horizontally", "description": "Mirrors an image with a given path horizontally from left to right.", "example": ">>> # Take screenshot of current screen to use as test image\n>>> testimage = take_screenshot()\n>>> # Mirror image horizontally\n>>> mirror_image_horizontally(testimage)\n>>> # Show the image\n>>> show_image(testimage)\n", "snippet": "# Take screenshot of current screen to use as test image\ntestimage = take_screenshot()\n# Mirror image horizontally\nmirror_image_horizontally(testimage)\n# Show the image\nshow_image(testimage)\n", "keywords": ["image", "flip", "flip image", "mirror", "mirror image", "horizon", "horizontally"], "icon": "las la-caret-up"}, {"function_call": "mirror_image_vertically(path)", "name": "Mirror image vertically", "description": "Mirrors an image with a given path vertically from top to bottom.", "example": ">>> # Take screenshot of current screen to use as test image\n>>> testimage = take_screenshot()\n>>> # Mirror image vertically\n>>> mirror_image_vertically(testimage)\n>>> # Show the image\n>>> show_image(testimage)\n", "snippet": "# Take screenshot of current screen to use as test image\ntestimage = take_screenshot()\n# Mirror image vertically\nmirror_image_vertically(testimage)\n# Show the image\nshow_image(testimage)\n", "keywords": ["image", "flip", "flip image", "mirror", "mirror image", "vertical", "vertically"], "icon": "las la-caret-right"}]}, {"name": "Process", "icon": "las la-play", "activities": [{"function_call": "run_manual(task)", "name": "Windows run", "description": "Use Windows Run to boot a processNote this uses keyboard inputs which means this process can be disrupted by interfering inputs", "example": ">>> # Open paint with Windows run\n>>> run_manual('mspaint.exe')\n>>> # Open home directory with Windows run\n>>> run_manual(home_path())\n", "snippet": "# Open paint with Windows run\nrun_manual('mspaint.exe')\n# Open home directory with Windows run\nrun_manual(home_path())\n", "keywords": ["run", "open", "task", "win r", "windows run", "shell", "cmd"], "icon": "las la-cog"}, {"function_call": "run(process)", "name": "Run process", "description": "Use subprocess to open a windows process", "example": ">>> # Open paint with Windows run\n>>> run('mspaint.exe')\n", "snippet": "# Open paint with Windows run\nrun('mspaint.exe')\n", "keywords": ["run", "open", "task", "win r", "windows run", "shell", "cmd"], "icon": "las la-play"}, {"function_call": "is_process_running(name)", "name": "Check if process is running", "description": "Check if process is running. Validates if given process name (name) is currently running on the system.", "example": ">>> # Open paint with Windows run\n>>> run('mspaint.exe')\n>>> # Check if paint is running\n>>> is_process_running('mspaint.exe')\nTrue\n", "snippet": "# Open paint with Windows run\nrun('mspaint.exe')\n# Check if paint is running\nis_process_running('mspaint.exe')\n", "keywords": ["run", "open", "task", "win r", "windows run", "shell", "cmd"], "icon": "las la-cogs"}, {"function_call": "get_running_processes()", "name": "Get running processes", "description": "Get names of unique processes currently running on the system.", "example": ">>> # Show all running processes\n>>> get_running_processes()\n['cmd.exe', 'chrome.exe', ... ]\n", "snippet": "# Show all running processes\nget_running_processes()\n", "keywords": ["process", "processes", "list processes", "running", "running processes"], "icon": "las la-list"}, {"function_call": "kill_process(name=None)", "name": "Kill process", "description": "Kills a process forcefully", "example": ">>> # Open paint with Windows run\n>>> run('mspaint.exe')\n>>> # Force paint to close\n>>> kill_process('mspaint.exe')\n", "snippet": "# Open paint with Windows run\nrun('mspaint.exe')\n# Force paint to close\nkill_process('mspaint.exe')\n", "keywords": ["run", "open", "task", "win r", "windows run", "shell", "cmd", "kill", "stop", "kill process", "stop process", "quit", "exit"], "icon": "las la-window-close"}]}, {"name": "Optical Character Recognition (OCR)", "icon": "las la-glasses", "activities": [{"function_call": "extract_text_ocr(path=None)", "name": "Get text with OCR", "description": "This activity extracts all text from the current screen or an image if a path is specified.", "example": ">>> # Make a textfile with some text to recognize\n>>> testfile = make_textfile(text='OCR Example')\n>>> # Open the textfile\n>>> open_file(testfile)\n>>> # Find the text with OCR\n>>> extracted_text = find_text_on_screen_ocr(text='OCR Example')\n>>> # Check if the extracted_text contains the original word\n>>> 'OCR Example' in extracted_text\nTrue\n", "snippet": "# Make a textfile with some text to recognize\ntestfile = make_textfile(text='OCR Example')\n# Open the textfile\nopen_file(testfile)\n# Find the text with OCR\nextracted_text = find_text_on_screen_ocr(text='OCR Example')\n# Check if the extracted_text contains the original word\n'OCR Example' in extracted_text\n", "keywords": ["OCR", "vision", "AI", "screen", "citrix", "read", "optical character recognition"], "icon": "lab la-readme"}, {"function_call": "find_text_on_screen_ocr(text, criteria=None)", "name": "Find text on screen with OCR", "description": "This activity finds position (coordinates) of specified text on the current screen using OCR.", "example": ">>> # Make a textfile with some text to recognize\n>>> testfile = make_textfile(text='OCR Example')\n>>> # Open the textfile\n>>> open_file(testfile)\n>>> # Find the text with OCR\n>>> find_text_on_screen_ocr(text='OCR Example')\n", "snippet": "# Make a textfile with some text to recognize\ntestfile = make_textfile(text='OCR Example')\n# Open the textfile\nopen_file(testfile)\n# Find the text with OCR\nfind_text_on_screen_ocr(text='OCR Example')\n", "keywords": ["OCR", "vision", "AI", "screen", "citrix", "read", "optical character recognition"], "icon": "las la-glasses"}, {"function_call": "click_on_text_ocr(text)", "name": "Click on text with OCR", "description": "This activity clicks on position (coordinates) of specified text on the current screen using OCR.", "example": ">>> # Make a textfile with some text to recognize\n>>> testfile = make_textfile(text='OCR Example')\n>>> # Open the textfile\n>>> open_file(testfile)\n>>> # Find the text with OCR and click on it\n>>> click_on_text(text='OCR Example')\n", "snippet": "# Make a textfile with some text to recognize\ntestfile = make_textfile(text='OCR Example')\n# Open the textfile\nopen_file(testfile)\n# Find the text with OCR and click on it\nclick_on_text(text='OCR Example')\n", "keywords": ["OCR", "vision", "AI", "screen", "citrix", "read", "optical character recognition", "click"], "icon": "las la-mouse-pointer"}, {"function_call": "double_click_on_text_ocr(text)", "name": "Double click on text with OCR", "description": "This activity double clicks on position (coordinates) of specified text on the current screen using OCR.", "example": ">>> # Make a textfile with some text to recognize\n>>> testfile = make_textfile(text='OCR Example')\n>>> # Open the textfile\n>>> open_file(testfile)\n>>> # Find the text with OCR and double click on it\n>>> double_click_on_text(text='OCR Example')\n", "snippet": "# Make a textfile with some text to recognize\ntestfile = make_textfile(text='OCR Example')\n# Open the textfile\nopen_file(testfile)\n# Find the text with OCR and double click on it\ndouble_click_on_text(text='OCR Example')\n", "keywords": ["OCR", "vision", "AI", "screen", "citrix", "read", "optical character recognition", "click", "double click"], "icon": "las la-mouse-pointer"}, {"function_call": "right_click_on_text_ocr(text)", "name": "Right click on text with OCR", "description": "This activity Right clicks on position (coordinates) of specified text on the current screen using OCR.", "example": ">>> # Make a textfile with some text to recognize\n>>> testfile = make_textfile(text='OCR Example')\n>>> # Open the textfile\n>>> open_file(testfile)\n>>> # Find the text with OCR and right click on it\n>>> right_click_on_text(text='OCR Example')\n", "snippet": "# Make a textfile with some text to recognize\ntestfile = make_textfile(text='OCR Example')\n# Open the textfile\nopen_file(testfile)\n# Find the text with OCR and right click on it\nright_click_on_text(text='OCR Example')\n", "keywords": ["OCR", "vision", "AI", "screen", "citrix", "read", "optical character recognition", "click", "right click"], "icon": "las la-mouse-pointer"}]}]